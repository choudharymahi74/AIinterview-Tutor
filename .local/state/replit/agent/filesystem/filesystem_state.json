{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nInterviewAI is a comprehensive AI-powered mock interview platform that helps users practice and improve their interview skills. The application provides voice-enabled mock interviews with AI-generated questions tailored to specific job roles, experience levels, and tech stacks. Users receive detailed AI feedback and scoring on their performance, with comprehensive analytics and progress tracking through a modern dashboard interface.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe client-side is built as a single-page application (SPA) using React with TypeScript and modern tooling:\n\n- **Framework**: React 18 with TypeScript for type safety and modern development practices\n- **Routing**: Wouter for lightweight client-side routing with authentication-based route protection\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Authentication Flow**: Conditional routing based on authentication state, redirecting unauthenticated users to login\n\nThe frontend follows a component-based architecture with clear separation between pages, reusable UI components, and custom hooks for shared logic.\n\n## Backend Architecture\n\nThe server-side uses a modern Node.js stack with Express and PostgreSQL:\n\n- **Runtime**: Node.js with Express.js framework for RESTful API endpoints\n- **Database**: PostgreSQL with Neon serverless hosting for scalable data storage\n- **ORM**: Drizzle ORM for type-safe database operations and schema management\n- **Authentication**: OpenID Connect integration with Replit for secure user authentication\n- **Session Management**: Express sessions with PostgreSQL session store for persistent user sessions\n\nThe backend follows a layered architecture with separate modules for routing, database operations, and external service integrations.\n\n## Database Design\n\nThe application uses PostgreSQL with a normalized schema supporting:\n\n- **User Management**: User profiles with preferences for interview customization\n- **Interview System**: Interview records with associated questions and responses\n- **Session Storage**: Secure session management with automatic cleanup\n- **Analytics**: Performance tracking and progress metrics\n\nThe schema uses Drizzle ORM with TypeScript for compile-time type safety and includes proper indexing for performance optimization.\n\n## AI Integration\n\nThe platform integrates Google Gemini AI for intelligent interview functionality:\n\n- **Question Generation**: Dynamic creation of technical, behavioral, and situational questions based on job role and experience level\n- **Response Evaluation**: AI-powered scoring and feedback on user responses including technical accuracy, communication skills, and confidence assessment\n- **Personalization**: Tailored question difficulty and focus areas based on user preferences and tech stack\n\n## Real-time Features\n\nLiveKit integration provides voice-enabled interview capabilities:\n\n- **Voice Processing**: Real-time audio capture and transcription for natural interview conversations\n- **Room Management**: Secure interview rooms with participant access control\n- **Audio Quality**: Professional-grade audio processing for clear communication\n\n# External Dependencies\n\n## AI Services\n- **Google Gemini API**: Powers intelligent question generation and response evaluation with natural language processing\n\n## Database & Hosting\n- **Neon Database**: Serverless PostgreSQL hosting with automatic scaling and backup management\n- **Replit Hosting**: Development and deployment platform with integrated authentication\n\n## Voice & Communication\n- **LiveKit**: Real-time voice communication infrastructure for interview sessions with WebRTC support\n\n## UI & Styling\n- **Tailwind CSS**: Utility-first CSS framework for responsive design and consistent styling\n- **Radix UI**: Accessible component primitives for robust user interface elements\n- **shadcn/ui**: Pre-built component library combining Radix UI with Tailwind CSS styling\n\n## Development Tools\n- **Vite**: Modern build tool for fast development and optimized production builds\n- **TypeScript**: Static type checking for improved code quality and developer experience\n- **Drizzle Kit**: Database migration and schema management tools","size_bytes":4499},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['Inter', 'system-ui', '-apple-system', 'sans-serif'],\n        serif: ['Georgia', 'serif'],\n        mono: ['Fira Code', 'SF Mono', 'Consolas', 'monospace'],\n        'inter': ['Inter', 'sans-serif'],\n      },\n      colors: {\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          50: \"hsl(221, 83%, 95%)\",\n          100: \"hsl(221, 83%, 90%)\",\n          200: \"hsl(221, 83%, 80%)\",\n          300: \"hsl(221, 83%, 70%)\",\n          400: \"hsl(221, 83%, 60%)\",\n          500: \"var(--primary)\",\n          600: \"hsl(221, 83%, 45%)\",\n          700: \"hsl(221, 83%, 35%)\",\n          800: \"hsl(221, 83%, 25%)\",\n          900: \"hsl(221, 83%, 15%)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n          50: \"hsl(263, 83%, 95%)\",\n          100: \"hsl(263, 83%, 90%)\",\n          200: \"hsl(263, 83%, 80%)\",\n          300: \"hsl(263, 83%, 70%)\",\n          400: \"hsl(263, 83%, 60%)\",\n          500: \"var(--secondary)\",\n          600: \"hsl(263, 83%, 45%)\",\n          700: \"hsl(263, 83%, 35%)\",\n          800: \"hsl(263, 83%, 25%)\",\n          900: \"hsl(263, 83%, 15%)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        blue: {\n          50: \"hsl(214, 100%, 97%)\",\n          100: \"hsl(214, 95%, 93%)\",\n          200: \"hsl(213, 97%, 87%)\",\n          300: \"hsl(212, 96%, 78%)\",\n          400: \"hsl(213, 94%, 68%)\",\n          500: \"hsl(217, 91%, 60%)\",\n          600: \"hsl(221, 83%, 53%)\",\n          700: \"hsl(224, 76%, 48%)\",\n          800: \"hsl(226, 71%, 40%)\",\n          900: \"hsl(224, 64%, 33%)\",\n        },\n        slate: {\n          50: \"hsl(210, 40%, 98%)\",\n          100: \"hsl(210, 40%, 96%)\",\n          200: \"hsl(214, 32%, 91%)\",\n          300: \"hsl(213, 27%, 84%)\",\n          400: \"hsl(215, 20%, 65%)\",\n          500: \"hsl(215, 16%, 47%)\",\n          600: \"hsl(215, 19%, 35%)\",\n          700: \"hsl(215, 25%, 27%)\",\n          800: \"hsl(217, 33%, 17%)\",\n          900: \"hsl(222, 84%, 4.9%)\",\n        },\n        green: {\n          400: \"hsl(142, 76%, 36%)\",\n          500: \"hsl(142, 71%, 45%)\",\n          600: \"hsl(142, 69%, 58%)\",\n        },\n        yellow: {\n          400: \"hsl(54, 91%, 95%)\",\n          500: \"hsl(45, 93%, 47%)\",\n          600: \"hsl(25, 95%, 53%)\",\n        },\n        red: {\n          400: \"hsl(0, 84%, 60%)\",\n          500: \"hsl(0, 72%, 51%)\",\n          600: \"hsl(0, 65%, 48%)\",\n        },\n        purple: {\n          400: \"hsl(263, 70%, 50%)\",\n          500: \"hsl(263, 83%, 57%)\",\n          600: \"hsl(263, 83%, 45%)\",\n        },\n        orange: {\n          500: \"hsl(25, 95%, 53%)\",\n          600: \"hsl(21, 90%, 48%)\",\n        },\n        cyan: {\n          500: \"hsl(188, 94%, 43%)\",\n          600: \"hsl(188, 86%, 53%)\",\n        },\n        pink: {\n          500: \"hsl(330, 81%, 60%)\",\n          600: \"hsl(330, 81%, 67%)\",\n        },\n        emerald: {\n          600: \"hsl(160, 84%, 39%)\",\n        },\n        rose: {\n          600: \"hsl(346, 77%, 49%)\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          \"0%\": {\n            opacity: \"0\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n          },\n        },\n        \"slide-up\": {\n          \"0%\": {\n            transform: \"translateY(10px)\",\n            opacity: \"0\",\n          },\n          \"100%\": {\n            transform: \"translateY(0)\",\n            opacity: \"1\",\n          },\n        },\n        \"pulse-slow\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.5\",\n          },\n        },\n        \"shimmer\": {\n          \"0%\": {\n            \"background-position\": \"-200% 0\",\n          },\n          \"100%\": {\n            \"background-position\": \"200% 0\",\n          },\n        },\n        \"voice-pulse\": {\n          \"0%\": {\n            transform: \"translate(-50%, -50%) scale(1)\",\n            opacity: \"1\",\n          },\n          \"100%\": {\n            transform: \"translate(-50%, -50%) scale(1.4)\",\n            opacity: \"0\",\n          },\n        },\n        \"recording-pulse\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.5\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.5s ease-in-out\",\n        \"slide-up\": \"slide-up 0.5s ease-out\",\n        \"pulse-slow\": \"pulse-slow 3s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"shimmer\": \"shimmer 2s infinite\",\n        \"voice-pulse\": \"voice-pulse 1.5s ease-in-out infinite\",\n        \"recording-pulse\": \"recording-pulse 1s ease-in-out infinite\",\n      },\n      boxShadow: {\n        \"glow\": \"0 0 20px rgb(59 130 246 / 0.5)\",\n        \"glow-lg\": \"0 0 30px rgb(59 130 246 / 0.6)\",\n      },\n      backgroundImage: {\n        \"gradient-radial\": \"radial-gradient(var(--tw-gradient-stops))\",\n        \"gradient-conic\": \"conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":7199},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { geminiService } from \"./services/gemini\";\nimport { liveKitService } from \"./services/livekit\";\nimport { insertInterviewSchema, insertUserPreferencesSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUserWithPreferences(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // User preferences routes\n  app.get('/api/preferences', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const preferences = await storage.getUserPreferences(userId);\n      res.json(preferences);\n    } catch (error) {\n      console.error(\"Error fetching preferences:\", error);\n      res.status(500).json({ message: \"Failed to fetch preferences\" });\n    }\n  });\n\n  app.post('/api/preferences', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertUserPreferencesSchema.parse(req.body);\n      const preferences = await storage.upsertUserPreferences(userId, validatedData);\n      res.json(preferences);\n    } catch (error) {\n      console.error(\"Error updating preferences:\", error);\n      res.status(500).json({ message: \"Failed to update preferences\" });\n    }\n  });\n\n  // Interview routes\n  app.get('/api/interviews', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const interviews = await storage.getUserInterviews(userId);\n      res.json(interviews);\n    } catch (error) {\n      console.error(\"Error fetching interviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch interviews\" });\n    }\n  });\n\n  app.post('/api/interviews', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertInterviewSchema.parse(req.body);\n      \n      // Create interview\n      const interview = await storage.createInterview(userId, validatedData);\n      \n      // Generate questions using Gemini\n      const questions = await geminiService.generateInterviewQuestions({\n        jobRole: interview.jobRole,\n        experienceLevel: interview.experienceLevel,\n        techStack: interview.techStack || [],\n        questionCount: interview.totalQuestions || 8,\n      });\n\n      // Save questions to database\n      for (let i = 0; i < questions.length; i++) {\n        await storage.addQuestionToInterview(interview.id, {\n          questionText: questions[i].question,\n          questionType: questions[i].type,\n          orderIndex: i,\n        });\n      }\n\n      // Create LiveKit room if voice enabled\n      if (interview.voiceEnabled) {\n        const roomName = await liveKitService.createInterviewRoom(interview.id);\n        await storage.updateInterview(interview.id, { roomName });\n      }\n\n      const fullInterview = await storage.getInterviewWithQuestions(interview.id);\n      res.json(fullInterview);\n    } catch (error) {\n      console.error(\"Error creating interview:\", error);\n      res.status(500).json({ message: \"Failed to create interview\" });\n    }\n  });\n\n  app.get('/api/interviews/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const interview = await storage.getInterviewWithQuestions(req.params.id);\n      \n      if (!interview || interview.userId !== userId) {\n        return res.status(404).json({ message: \"Interview not found\" });\n      }\n\n      res.json(interview);\n    } catch (error) {\n      console.error(\"Error fetching interview:\", error);\n      res.status(500).json({ message: \"Failed to fetch interview\" });\n    }\n  });\n\n  app.patch('/api/interviews/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const interview = await storage.getInterview(req.params.id);\n      \n      if (!interview || interview.userId !== userId) {\n        return res.status(404).json({ message: \"Interview not found\" });\n      }\n\n      const updated = await storage.updateInterview(req.params.id, req.body);\n      res.json(updated);\n    } catch (error) {\n      console.error(\"Error updating interview:\", error);\n      res.status(500).json({ message: \"Failed to update interview\" });\n    }\n  });\n\n  app.delete('/api/interviews/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const interview = await storage.getInterview(req.params.id);\n      \n      if (!interview || interview.userId !== userId) {\n        return res.status(404).json({ message: \"Interview not found\" });\n      }\n\n      // End LiveKit room if exists\n      if (interview.roomName) {\n        await liveKitService.endInterviewRoom(interview.roomName);\n      }\n\n      const deleted = await storage.deleteInterview(req.params.id);\n      res.json({ success: deleted });\n    } catch (error) {\n      console.error(\"Error deleting interview:\", error);\n      res.status(500).json({ message: \"Failed to delete interview\" });\n    }\n  });\n\n  // Question response routes\n  app.post('/api/questions/:id/response', isAuthenticated, async (req: any, res) => {\n    try {\n      const { response, transcript, timeSpent } = req.body;\n      \n      if (!response) {\n        return res.status(400).json({ message: \"Response is required\" });\n      }\n\n      // Get question and interview details for evaluation\n      const question = await storage.updateQuestionResponse(\n        req.params.id,\n        response,\n        transcript,\n        undefined, // score will be added after evaluation\n        undefined, // feedback will be added after evaluation\n        timeSpent\n      );\n\n      if (!question) {\n        return res.status(404).json({ message: \"Question not found\" });\n      }\n\n      // Get interview for context\n      const interview = await storage.getInterview(question.interviewId);\n      if (!interview) {\n        return res.status(404).json({ message: \"Interview not found\" });\n      }\n\n      // Evaluate response using Gemini\n      const evaluation = await geminiService.evaluateResponse({\n        question: question.questionText,\n        response,\n        jobRole: interview.jobRole,\n        experienceLevel: interview.experienceLevel,\n      });\n\n      // Update question with evaluation results\n      const updatedQuestion = await storage.updateQuestionResponse(\n        req.params.id,\n        response,\n        transcript,\n        evaluation.score,\n        evaluation.feedback,\n        timeSpent\n      );\n\n      res.json({\n        question: updatedQuestion,\n        evaluation,\n      });\n    } catch (error) {\n      console.error(\"Error submitting response:\", error);\n      res.status(500).json({ message: \"Failed to submit response\" });\n    }\n  });\n\n  // LiveKit token generation\n  app.post('/api/interviews/:id/token', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const interview = await storage.getInterview(req.params.id);\n      \n      if (!interview || interview.userId !== userId) {\n        return res.status(404).json({ message: \"Interview not found\" });\n      }\n\n      if (!interview.roomName) {\n        return res.status(400).json({ message: \"Interview does not have voice enabled\" });\n      }\n\n      const user = await storage.getUser(userId);\n      const participantName = user?.firstName || user?.email || `User-${userId}`;\n\n      const token = await liveKitService.generateAccessToken(\n        interview.roomName,\n        participantName,\n        userId\n      );\n\n      res.json({ \n        token, \n        wsUrl: process.env.LIVEKIT_URL || 'wss://your-livekit-instance.livekit.cloud',\n        roomName: interview.roomName\n      });\n    } catch (error) {\n      console.error(\"Error generating LiveKit token:\", error);\n      res.status(500).json({ message: \"Failed to generate access token\" });\n    }\n  });\n\n  // Analytics routes\n  app.get('/api/analytics/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const stats = await storage.getUserStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  // Interview completion route\n  app.post('/api/interviews/:id/complete', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const interview = await storage.getInterviewWithQuestions(req.params.id);\n      \n      if (!interview || interview.userId !== userId) {\n        return res.status(404).json({ message: \"Interview not found\" });\n      }\n\n      // Calculate overall scores\n      const questionScores = interview.questions\n        .filter(q => q.responseScore)\n        .map(q => parseFloat(q.responseScore!));\n\n      const communicationScores = interview.questions\n        .filter(q => q.responseScore) // Simplified for now\n        .map(q => parseFloat(q.responseScore!) * 0.8); // Communication component\n\n      const technicalScores = interview.questions\n        .filter(q => q.questionType === 'technical' && q.responseScore)\n        .map(q => parseFloat(q.responseScore!));\n\n      const overallScore = questionScores.length > 0\n        ? questionScores.reduce((a, b) => a + b, 0) / questionScores.length\n        : 0;\n\n      const communicationScore = communicationScores.length > 0\n        ? communicationScores.reduce((a, b) => a + b, 0) / communicationScores.length\n        : 0;\n\n      const technicalScore = technicalScores.length > 0\n        ? technicalScores.reduce((a, b) => a + b, 0) / technicalScores.length\n        : overallScore;\n\n      // Generate overall feedback\n      const evaluations = interview.questions\n        .filter(q => q.responseScore && q.responseFeedback)\n        .map(q => ({\n          score: parseFloat(q.responseScore!),\n          feedback: q.responseFeedback!,\n          strengths: [],\n          improvements: [],\n          confidenceLevel: 75, // Simplified\n          communicationScore: communicationScore,\n          technicalScore: technicalScore,\n        }));\n\n      const overallFeedback = evaluations.length > 0\n        ? await geminiService.generateOverallFeedback(evaluations)\n        : \"Complete more questions to receive detailed feedback.\";\n\n      // Update interview with final scores\n      const completedInterview = await storage.updateInterview(req.params.id, {\n        status: 'completed' as any,\n        overallScore: overallScore.toString() as any,\n        communicationScore: communicationScore.toString() as any,\n        technicalScore: technicalScore.toString() as any,\n        confidenceLevel: '80', // Simplified calculation\n        feedback: overallFeedback,\n        duration: req.body.duration || 30,\n      });\n\n      // End LiveKit room\n      if (interview.roomName) {\n        await liveKitService.endInterviewRoom(interview.roomName);\n      }\n\n      res.json(completedInterview);\n    } catch (error) {\n      console.error(\"Error completing interview:\", error);\n      res.status(500).json({ message: \"Failed to complete interview\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":11685},"server/storage.ts":{"content":"import {\n  users,\n  interviews,\n  interviewQuestions,\n  userPreferences,\n  type User,\n  type UpsertUser,\n  type Interview,\n  type InsertInterview,\n  type InterviewQuestion,\n  type InsertQuestion,\n  type UserPreferences,\n  type InsertUserPreferences,\n  type InterviewWithQuestions,\n  type UserWithPreferences,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getUserWithPreferences(id: string): Promise<UserWithPreferences | undefined>;\n  \n  // Interview operations\n  createInterview(userId: string, interview: InsertInterview): Promise<Interview>;\n  getInterview(id: string): Promise<Interview | undefined>;\n  getInterviewWithQuestions(id: string): Promise<InterviewWithQuestions | undefined>;\n  getUserInterviews(userId: string): Promise<Interview[]>;\n  updateInterview(id: string, updates: Partial<Interview>): Promise<Interview | undefined>;\n  deleteInterview(id: string): Promise<boolean>;\n  \n  // Question operations\n  addQuestionToInterview(interviewId: string, question: InsertQuestion): Promise<InterviewQuestion>;\n  updateQuestionResponse(\n    questionId: string, \n    response: string, \n    transcript?: string, \n    score?: number, \n    feedback?: string,\n    timeSpent?: number\n  ): Promise<InterviewQuestion | undefined>;\n  \n  // User preferences operations\n  getUserPreferences(userId: string): Promise<UserPreferences | undefined>;\n  upsertUserPreferences(userId: string, preferences: InsertUserPreferences): Promise<UserPreferences>;\n  \n  // Analytics operations\n  getUserStats(userId: string): Promise<{\n    totalInterviews: number;\n    averageScore: number;\n    confidenceLevel: number;\n    practiceTime: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async getUserWithPreferences(id: string): Promise<UserWithPreferences | undefined> {\n    const [result] = await db\n      .select()\n      .from(users)\n      .leftJoin(userPreferences, eq(users.id, userPreferences.userId))\n      .where(eq(users.id, id));\n\n    if (!result.users) return undefined;\n\n    return {\n      ...result.users,\n      preferences: result.user_preferences || undefined,\n    };\n  }\n\n  // Interview operations\n  async createInterview(userId: string, interview: InsertInterview): Promise<Interview> {\n    const [newInterview] = await db\n      .insert(interviews)\n      .values({\n        ...interview,\n        userId,\n      })\n      .returning();\n    return newInterview;\n  }\n\n  async getInterview(id: string): Promise<Interview | undefined> {\n    const [interview] = await db\n      .select()\n      .from(interviews)\n      .where(eq(interviews.id, id));\n    return interview;\n  }\n\n  async getInterviewWithQuestions(id: string): Promise<InterviewWithQuestions | undefined> {\n    const [interview] = await db\n      .select()\n      .from(interviews)\n      .where(eq(interviews.id, id));\n\n    if (!interview) return undefined;\n\n    const questions = await db\n      .select()\n      .from(interviewQuestions)\n      .where(eq(interviewQuestions.interviewId, id))\n      .orderBy(interviewQuestions.orderIndex);\n\n    return {\n      ...interview,\n      questions,\n    };\n  }\n\n  async getUserInterviews(userId: string): Promise<Interview[]> {\n    return await db\n      .select()\n      .from(interviews)\n      .where(eq(interviews.userId, userId))\n      .orderBy(desc(interviews.createdAt));\n  }\n\n  async updateInterview(id: string, updates: Partial<Interview>): Promise<Interview | undefined> {\n    const [updated] = await db\n      .update(interviews)\n      .set({\n        ...updates,\n        updatedAt: new Date(),\n      })\n      .where(eq(interviews.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteInterview(id: string): Promise<boolean> {\n    const result = await db\n      .delete(interviews)\n      .where(eq(interviews.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Question operations\n  async addQuestionToInterview(interviewId: string, question: InsertQuestion): Promise<InterviewQuestion> {\n    const [newQuestion] = await db\n      .insert(interviewQuestions)\n      .values({\n        ...question,\n        interviewId,\n      })\n      .returning();\n    return newQuestion;\n  }\n\n  async updateQuestionResponse(\n    questionId: string,\n    response: string,\n    transcript?: string,\n    score?: number,\n    feedback?: string,\n    timeSpent?: number\n  ): Promise<InterviewQuestion | undefined> {\n    const updates: Partial<InterviewQuestion> = {\n      userResponse: response,\n    };\n    \n    if (transcript) updates.responseTranscript = transcript;\n    if (score !== undefined) updates.responseScore = score.toString() as any;\n    if (feedback) updates.responseFeedback = feedback;\n    if (timeSpent !== undefined) updates.timeSpent = timeSpent;\n\n    const [updated] = await db\n      .update(interviewQuestions)\n      .set(updates)\n      .where(eq(interviewQuestions.id, questionId))\n      .returning();\n    return updated;\n  }\n\n  // User preferences operations\n  async getUserPreferences(userId: string): Promise<UserPreferences | undefined> {\n    const [preferences] = await db\n      .select()\n      .from(userPreferences)\n      .where(eq(userPreferences.userId, userId));\n    return preferences;\n  }\n\n  async upsertUserPreferences(userId: string, preferences: InsertUserPreferences): Promise<UserPreferences> {\n    const [upserted] = await db\n      .insert(userPreferences)\n      .values({\n        ...preferences,\n        userId,\n      })\n      .onConflictDoUpdate({\n        target: userPreferences.userId,\n        set: {\n          ...preferences,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return upserted;\n  }\n\n  // Analytics operations\n  async getUserStats(userId: string): Promise<{\n    totalInterviews: number;\n    averageScore: number;\n    confidenceLevel: number;\n    practiceTime: number;\n  }> {\n    // Get total interviews count\n    const [interviewCount] = await db\n      .select({ count: count() })\n      .from(interviews)\n      .where(and(\n        eq(interviews.userId, userId),\n        eq(interviews.status, 'completed')\n      ));\n\n    // Get completed interviews for calculations\n    const completedInterviews = await db\n      .select()\n      .from(interviews)\n      .where(and(\n        eq(interviews.userId, userId),\n        eq(interviews.status, 'completed')\n      ));\n\n    const totalInterviews = interviewCount.count || 0;\n    let averageScore = 0;\n    let confidenceLevel = 0;\n    let practiceTime = 0;\n\n    if (completedInterviews.length > 0) {\n      const scores = completedInterviews\n        .filter(i => i.overallScore)\n        .map(i => parseFloat(i.overallScore!));\n      \n      const confidenceLevels = completedInterviews\n        .filter(i => i.confidenceLevel)\n        .map(i => parseFloat(i.confidenceLevel!));\n\n      const durations = completedInterviews\n        .filter(i => i.duration)\n        .map(i => i.duration!);\n\n      averageScore = scores.length > 0 \n        ? scores.reduce((a, b) => a + b, 0) / scores.length \n        : 0;\n\n      confidenceLevel = confidenceLevels.length > 0\n        ? confidenceLevels.reduce((a, b) => a + b, 0) / confidenceLevels.length\n        : 0;\n\n      practiceTime = durations.reduce((a, b) => a + b, 0);\n    }\n\n    return {\n      totalInterviews,\n      averageScore: Math.round(averageScore * 100) / 100,\n      confidenceLevel: Math.round(confidenceLevel * 100) / 100,\n      practiceTime: Math.round(practiceTime / 60), // Convert to hours\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":8150},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Job roles enum\nexport const jobRoleEnum = pgEnum('job_role', [\n  'frontend_developer',\n  'backend_developer',\n  'fullstack_developer',\n  'mobile_developer',\n  'data_scientist',\n  'product_manager',\n  'ux_designer',\n  'devops_engineer',\n  'qa_engineer',\n  'software_architect',\n]);\n\n// Experience level enum\nexport const experienceLevelEnum = pgEnum('experience_level', [\n  'entry',\n  'junior',\n  'mid',\n  'senior',\n  'lead',\n  'principal',\n]);\n\n// Interview status enum\nexport const interviewStatusEnum = pgEnum('interview_status', [\n  'pending',\n  'in_progress',\n  'completed',\n  'cancelled',\n]);\n\n// Interviews table\nexport const interviews = pgTable(\"interviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  title: varchar(\"title\").notNull(),\n  jobRole: jobRoleEnum(\"job_role\").notNull(),\n  experienceLevel: experienceLevelEnum(\"experience_level\").notNull(),\n  techStack: text(\"tech_stack\").array(),\n  status: interviewStatusEnum(\"status\").default('pending'),\n  duration: integer(\"duration\"), // in minutes\n  totalQuestions: integer(\"total_questions\").default(8),\n  currentQuestion: integer(\"current_question\").default(0),\n  overallScore: decimal(\"overall_score\", { precision: 3, scale: 2 }),\n  confidenceLevel: decimal(\"confidence_level\", { precision: 3, scale: 2 }),\n  communicationScore: decimal(\"communication_score\", { precision: 3, scale: 2 }),\n  technicalScore: decimal(\"technical_score\", { precision: 3, scale: 2 }),\n  feedback: text(\"feedback\"),\n  voiceEnabled: boolean(\"voice_enabled\").default(false),\n  roomName: varchar(\"room_name\"), // LiveKit room identifier\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Interview questions table\nexport const interviewQuestions = pgTable(\"interview_questions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  interviewId: varchar(\"interview_id\").notNull().references(() => interviews.id, { onDelete: 'cascade' }),\n  questionText: text(\"question_text\").notNull(),\n  questionType: varchar(\"question_type\").notNull(), // 'technical', 'behavioral', 'situational'\n  orderIndex: integer(\"order_index\").notNull(),\n  userResponse: text(\"user_response\"),\n  responseTranscript: text(\"response_transcript\"),\n  responseScore: decimal(\"response_score\", { precision: 3, scale: 2 }),\n  responseFeedback: text(\"response_feedback\"),\n  timeSpent: integer(\"time_spent\"), // in seconds\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User preferences table\nexport const userPreferences = pgTable(\"user_preferences\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: 'cascade' }),\n  preferredJobRole: jobRoleEnum(\"preferred_job_role\"),\n  preferredExperienceLevel: experienceLevelEnum(\"preferred_experience_level\"),\n  preferredTechStack: text(\"preferred_tech_stack\").array(),\n  voiceEnabledByDefault: boolean(\"voice_enabled_by_default\").default(true),\n  darkMode: boolean(\"dark_mode\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many, one }) => ({\n  interviews: many(interviews),\n  preferences: one(userPreferences),\n}));\n\nexport const interviewsRelations = relations(interviews, ({ one, many }) => ({\n  user: one(users, {\n    fields: [interviews.userId],\n    references: [users.id],\n  }),\n  questions: many(interviewQuestions),\n}));\n\nexport const interviewQuestionsRelations = relations(interviewQuestions, ({ one }) => ({\n  interview: one(interviews, {\n    fields: [interviewQuestions.interviewId],\n    references: [interviews.id],\n  }),\n}));\n\nexport const userPreferencesRelations = relations(userPreferences, ({ one }) => ({\n  user: one(users, {\n    fields: [userPreferences.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  id: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n});\n\nexport const insertInterviewSchema = createInsertSchema(interviews).pick({\n  title: true,\n  jobRole: true,\n  experienceLevel: true,\n  techStack: true,\n  voiceEnabled: true,\n});\n\nexport const insertQuestionSchema = createInsertSchema(interviewQuestions).pick({\n  questionText: true,\n  questionType: true,\n  orderIndex: true,\n});\n\nexport const insertUserPreferencesSchema = createInsertSchema(userPreferences).pick({\n  preferredJobRole: true,\n  preferredExperienceLevel: true,\n  preferredTechStack: true,\n  voiceEnabledByDefault: true,\n  darkMode: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertInterview = z.infer<typeof insertInterviewSchema>;\nexport type Interview = typeof interviews.$inferSelect;\nexport type InsertQuestion = z.infer<typeof insertQuestionSchema>;\nexport type InterviewQuestion = typeof interviewQuestions.$inferSelect;\nexport type InsertUserPreferences = z.infer<typeof insertUserPreferencesSchema>;\nexport type UserPreferences = typeof userPreferences.$inferSelect;\n\n// Extended types with relations\nexport type InterviewWithQuestions = Interview & {\n  questions: InterviewQuestion[];\n};\n\nexport type UserWithPreferences = User & {\n  preferences?: UserPreferences;\n};\n","size_bytes":6425},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Interview from \"@/pages/interview\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route component={NotFound} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/interview/:id\" component={Interview} />\n          <Route component={NotFound} />\n        </>\n      )}\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1364},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 4.9%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(263, 83%, 57%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 13%, 65%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222, 84%, 4.9%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(160, 84%, 39%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222, 84%, 4.9%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222, 84%, 4.9%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: 'Georgia', serif;\n  --font-mono: 'Fira Code', 'SF Mono', Consolas, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(217, 91%, 60%);\n  --primary-foreground: hsl(222, 47%, 11%);\n  --secondary: hsl(263, 70%, 50%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(224, 71%, 4%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n  --sidebar: hsl(222, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(217, 91%, 60%);\n  --sidebar-primary-foreground: hsl(222, 47%, 11%);\n  --sidebar-accent: hsl(217, 32%, 17%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(217, 91%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n}\n\n@layer utilities {\n  .animate-fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.5s ease-out;\n  }\n  \n  .animate-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n}\n\n@keyframes fadeIn {\n  0% { \n    opacity: 0; \n  }\n  100% { \n    opacity: 1; \n  }\n}\n\n@keyframes slideUp {\n  0% { \n    transform: translateY(10px); \n    opacity: 0; \n  }\n  100% { \n    transform: translateY(0); \n    opacity: 1; \n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--border));\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--muted-foreground));\n}\n\n/* Focus styles */\n.focus-visible:focus-visible {\n  outline: 2px solid hsl(var(--ring));\n  outline-offset: 2px;\n}\n\n/* Interview specific styles */\n.interview-container {\n  background: linear-gradient(135deg, hsl(var(--muted)) 0%, hsl(var(--background)) 100%);\n}\n\n.voice-indicator {\n  position: relative;\n}\n\n.voice-indicator::before {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 100%;\n  height: 100%;\n  border: 2px solid hsl(var(--primary));\n  border-radius: 50%;\n  animation: voice-pulse 1.5s ease-in-out infinite;\n}\n\n@keyframes voice-pulse {\n  0% {\n    transform: translate(-50%, -50%) scale(1);\n    opacity: 1;\n  }\n  100% {\n    transform: translate(-50%, -50%) scale(1.4);\n    opacity: 0;\n  }\n}\n\n/* Gradient text */\n.gradient-text {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--secondary)) 100%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n  background-clip: text;\n}\n\n/* Card hover effects */\n.card-hover {\n  transition: all 0.3s ease;\n}\n\n.card-hover:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 10px 10px -5px rgb(0 0 0 / 0.04);\n}\n\n/* Loading shimmer */\n.shimmer {\n  background: linear-gradient(\n    90deg,\n    hsl(var(--muted)) 0%,\n    hsl(var(--accent)) 50%,\n    hsl(var(--muted)) 100%\n  );\n  background-size: 200% 100%;\n  animation: shimmer 2s infinite;\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: -200% 0;\n  }\n  100% {\n    background-position: 200% 0;\n  }\n}\n\n/* Interview progress bar */\n.progress-bar {\n  background: linear-gradient(\n    90deg,\n    hsl(var(--primary)) 0%,\n    hsl(var(--secondary)) 100%\n  );\n}\n\n/* Status badges */\n.status-pending {\n  background: hsl(var(--muted));\n  color: hsl(var(--muted-foreground));\n}\n\n.status-in-progress {\n  background: hsl(var(--primary) / 0.1);\n  color: hsl(var(--primary));\n}\n\n.status-completed {\n  background: hsl(160, 84%, 39% / 0.1);\n  color: hsl(160, 84%, 39%);\n}\n\n.status-cancelled {\n  background: hsl(var(--destructive) / 0.1);\n  color: hsl(var(--destructive));\n}\n\n/* Interview interface styles */\n.interview-live {\n  background: linear-gradient(135deg, hsl(222, 84%, 4.9%) 0%, hsl(217, 32%, 17%) 100%);\n}\n\n.ai-avatar {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--secondary)) 100%);\n  animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Voice recording styles */\n.recording-indicator {\n  background: hsl(0, 84%, 60%);\n  animation: recording-pulse 1s ease-in-out infinite;\n}\n\n@keyframes recording-pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n/* Responsive utilities */\n@media (max-width: 768px) {\n  .mobile-padding {\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n  \n  .mobile-text {\n    font-size: 0.875rem;\n    line-height: 1.25rem;\n  }\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n  \n  .print-break {\n    page-break-before: always;\n  }\n}\n","size_bytes":6712},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({ \n  apiKey: process.env.GEMINI_API_KEY || process.env.GOOGLE_GEMINI_API_KEY || \"\" \n});\n\nexport interface GenerateQuestionsRequest {\n  jobRole: string;\n  experienceLevel: string;\n  techStack: string[];\n  questionCount: number;\n}\n\nexport interface InterviewQuestion {\n  question: string;\n  type: 'technical' | 'behavioral' | 'situational';\n  expectedAreas: string[];\n}\n\nexport interface EvaluateResponseRequest {\n  question: string;\n  response: string;\n  jobRole: string;\n  experienceLevel: string;\n}\n\nexport interface ResponseEvaluation {\n  score: number; // 0-10\n  feedback: string;\n  strengths: string[];\n  improvements: string[];\n  confidenceLevel: number; // 0-100\n  communicationScore: number; // 0-10\n  technicalScore: number; // 0-10\n}\n\nexport class GeminiService {\n  async generateInterviewQuestions(request: GenerateQuestionsRequest): Promise<InterviewQuestion[]> {\n    try {\n      const systemPrompt = `You are an expert technical interviewer. Generate ${request.questionCount} interview questions for a ${request.experienceLevel} ${request.jobRole} position.\n\nTech stack: ${request.techStack.join(', ')}\n\nCreate a balanced mix of:\n- 60% Technical questions (coding, system design, specific technologies)\n- 25% Behavioral questions (teamwork, leadership, problem-solving)\n- 15% Situational questions (handling conflicts, deadlines, challenges)\n\nFor each question, specify:\n- The exact question text\n- Question type (technical/behavioral/situational)\n- Key areas the response should cover\n\nRespond with valid JSON array format.`;\n\n      const response = await ai.models.generateContent({\n        model: \"gemini-2.5-pro\",\n        config: {\n          systemInstruction: systemPrompt,\n          responseMimeType: \"application/json\",\n          responseSchema: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                question: { type: \"string\" },\n                type: { type: \"string\", enum: [\"technical\", \"behavioral\", \"situational\"] },\n                expectedAreas: { type: \"array\", items: { type: \"string\" } }\n              },\n              required: [\"question\", \"type\", \"expectedAreas\"]\n            }\n          }\n        },\n        contents: `Generate interview questions for: ${request.jobRole} (${request.experienceLevel}) with tech stack: ${request.techStack.join(', ')}`\n      });\n\n      const rawJson = response.text;\n      if (!rawJson) {\n        throw new Error(\"Empty response from Gemini\");\n      }\n\n      return JSON.parse(rawJson);\n    } catch (error) {\n      console.error(\"Error generating questions:\", error);\n      throw new Error(`Failed to generate interview questions: ${error}`);\n    }\n  }\n\n  async evaluateResponse(request: EvaluateResponseRequest): Promise<ResponseEvaluation> {\n    try {\n      const systemPrompt = `You are an expert interview evaluator. Analyze the candidate's response and provide structured feedback.\n\nEvaluate based on:\n1. Technical accuracy and depth (for technical questions)\n2. Communication clarity and structure\n3. Confidence and presentation\n4. Completeness of the answer\n5. Practical experience demonstration\n\nProvide scores:\n- Overall score: 0-10 (10 being excellent)\n- Communication score: 0-10 (clarity, structure, articulation)\n- Technical score: 0-10 (accuracy, depth, practical knowledge)\n- Confidence level: 0-100 (body language, tone, conviction)\n\nGive specific, actionable feedback including strengths and areas for improvement.\n\nRespond with valid JSON format.`;\n\n      const response = await ai.models.generateContent({\n        model: \"gemini-2.5-pro\",\n        config: {\n          systemInstruction: systemPrompt,\n          responseMimeType: \"application/json\",\n          responseSchema: {\n            type: \"object\",\n            properties: {\n              score: { type: \"number\" },\n              feedback: { type: \"string\" },\n              strengths: { type: \"array\", items: { type: \"string\" } },\n              improvements: { type: \"array\", items: { type: \"string\" } },\n              confidenceLevel: { type: \"number\" },\n              communicationScore: { type: \"number\" },\n              technicalScore: { type: \"number\" }\n            },\n            required: [\"score\", \"feedback\", \"strengths\", \"improvements\", \"confidenceLevel\", \"communicationScore\", \"technicalScore\"]\n          }\n        },\n        contents: `\nPosition: ${request.jobRole} (${request.experienceLevel})\nQuestion: ${request.question}\nCandidate Response: ${request.response}\n\nEvaluate this response comprehensively.`\n      });\n\n      const rawJson = response.text;\n      if (!rawJson) {\n        throw new Error(\"Empty response from Gemini\");\n      }\n\n      return JSON.parse(rawJson);\n    } catch (error) {\n      console.error(\"Error evaluating response:\", error);\n      throw new Error(`Failed to evaluate response: ${error}`);\n    }\n  }\n\n  async generateOverallFeedback(responses: ResponseEvaluation[]): Promise<string> {\n    try {\n      const systemPrompt = `You are an expert career coach. Based on the individual question evaluations, provide comprehensive interview feedback.\n\nInclude:\n1. Overall performance summary\n2. Key strengths demonstrated\n3. Primary areas for improvement\n4. Specific actionable recommendations\n5. Next steps for skill development\n\nMake it encouraging but honest, with concrete advice.`;\n\n      const evaluationSummary = responses.map((r, i) => \n        `Question ${i + 1}: Score ${r.score}/10, Confidence ${r.confidenceLevel}%`\n      ).join('\\n');\n\n      const response = await ai.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        config: {\n          systemInstruction: systemPrompt,\n        },\n        contents: `Based on these interview question evaluations:\\n\\n${evaluationSummary}\\n\\nProvide comprehensive feedback for the candidate.`\n      });\n\n      return response.text || \"Unable to generate overall feedback\";\n    } catch (error) {\n      console.error(\"Error generating overall feedback:\", error);\n      throw new Error(`Failed to generate overall feedback: ${error}`);\n    }\n  }\n}\n\nexport const geminiService = new GeminiService();\n","size_bytes":6175},"server/services/livekit.ts":{"content":"import { AccessToken, RoomServiceClient } from 'livekit-server-sdk';\n\nconst apiKey = process.env.LIVEKIT_API_KEY || '';\nconst apiSecret = process.env.LIVEKIT_API_SECRET || '';\nconst wsUrl = process.env.LIVEKIT_URL || 'wss://your-livekit-instance.livekit.cloud';\n\nexport class LiveKitService {\n  private roomService: RoomServiceClient;\n\n  constructor() {\n    this.roomService = new RoomServiceClient(wsUrl, apiKey, apiSecret);\n  }\n\n  async createInterviewRoom(interviewId: string): Promise<string> {\n    try {\n      const roomName = `interview-${interviewId}`;\n      \n      // Create room if it doesn't exist\n      await this.roomService.createRoom({\n        name: roomName,\n        emptyTimeout: 300, // 5 minutes\n        maxParticipants: 2, // User + AI\n      });\n\n      return roomName;\n    } catch (error) {\n      console.error('Error creating interview room:', error);\n      throw new Error(`Failed to create interview room: ${error}`);\n    }\n  }\n\n  async generateAccessToken(roomName: string, participantName: string, userId: string): Promise<string> {\n    try {\n      const at = new AccessToken(apiKey, apiSecret, {\n        identity: userId,\n        name: participantName,\n      });\n\n      at.addGrant({\n        roomJoin: true,\n        room: roomName,\n        canPublish: true,\n        canSubscribe: true,\n        canPublishData: true,\n      });\n\n      return await at.toJwt();\n    } catch (error) {\n      console.error('Error generating access token:', error);\n      throw new Error(`Failed to generate access token: ${error}`);\n    }\n  }\n\n  async endInterviewRoom(roomName: string): Promise<void> {\n    try {\n      await this.roomService.deleteRoom(roomName);\n    } catch (error) {\n      console.error('Error ending interview room:', error);\n      // Don't throw here as the interview might still be valid\n    }\n  }\n\n  async getRoomInfo(roomName: string) {\n    try {\n      return await this.roomService.listRooms([roomName]);\n    } catch (error) {\n      console.error('Error getting room info:', error);\n      return null;\n    }\n  }\n}\n\nexport const liveKitService = new LiveKitService();\n","size_bytes":2096},"client/src/components/interview-feedback.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Navigation } from \"@/components/navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  ArrowLeft,\n  Award,\n  BarChart3,\n  TrendingUp,\n  MessageCircle,\n  Code,\n  Clock,\n  CheckCircle2,\n  Target,\n  Star,\n  Download,\n  Share2\n} from \"lucide-react\";\n\ninterface InterviewFeedbackProps {\n  interviewId: string;\n}\n\nexport function InterviewFeedback({ interviewId }: InterviewFeedbackProps) {\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n\n  const { data: interview, isLoading, error } = useQuery({\n    queryKey: [\"/api/interviews\", interviewId],\n    retry: false,\n    enabled: !!interviewId,\n  });\n\n  // Auth check\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  if (authLoading || !isAuthenticated) {\n    return <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\" />;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\">\n        <Navigation />\n        <div className=\"pt-16 flex items-center justify-center min-h-screen\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-slate-600 dark:text-slate-300\">Loading your feedback...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !interview) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\">\n        <Navigation />\n        <div className=\"pt-16 flex items-center justify-center min-h-screen\">\n          <Card className=\"w-full max-w-md mx-4\">\n            <CardContent className=\"pt-6 text-center\">\n              <h1 className=\"text-2xl font-bold text-slate-900 dark:text-white mb-4\">\n                Feedback Not Available\n              </h1>\n              <p className=\"text-slate-600 dark:text-slate-300 mb-6\">\n                Unable to load interview feedback. Please try again.\n              </p>\n              <Button asChild data-testid=\"button-back-dashboard\">\n                <Link href=\"/dashboard\">\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                  Back to Dashboard\n                </Link>\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const overallScore = interview.overallScore ? parseFloat(interview.overallScore) : 0;\n  const communicationScore = interview.communicationScore ? parseFloat(interview.communicationScore) : 0;\n  const technicalScore = interview.technicalScore ? parseFloat(interview.technicalScore) : 0;\n  const confidenceLevel = interview.confidenceLevel ? parseFloat(interview.confidenceLevel) : 0;\n\n  const getScoreColor = (score: number) => {\n    if (score >= 8) return 'text-green-600 dark:text-green-400';\n    if (score >= 6) return 'text-yellow-600 dark:text-yellow-400';\n    return 'text-red-600 dark:text-red-400';\n  };\n\n  const getScoreLevel = (score: number) => {\n    if (score >= 9) return 'Excellent';\n    if (score >= 8) return 'Very Good';\n    if (score >= 7) return 'Good';\n    if (score >= 6) return 'Above Average';\n    if (score >= 5) return 'Average';\n    return 'Needs Improvement';\n  };\n\n  const answeredQuestions = interview.questions?.filter((q: any) => q.userResponse) || [];\n  const completionRate = interview.questions?.length \n    ? (answeredQuestions.length / interview.questions.length) * 100 \n    : 0;\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\">\n      <Navigation />\n      \n      <div className=\"pt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-slate-900 dark:text-white mb-2\">\n                Interview Feedback\n              </h1>\n              <p className=\"text-lg text-slate-600 dark:text-slate-300\">\n                {interview.title}\n              </p>\n            </div>\n            <div className=\"flex gap-3\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-download-feedback\">\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download Report\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-share-feedback\">\n                <Share2 className=\"mr-2 h-4 w-4\" />\n                Share\n              </Button>\n              <Button asChild data-testid=\"button-new-interview\">\n                <Link href=\"/\">\n                  Start New Interview\n                </Link>\n              </Button>\n            </div>\n          </div>\n\n          {/* Celebration Header */}\n          <Card className=\"mb-8 bg-gradient-to-r from-primary/10 to-secondary/10 border-primary/20\">\n            <CardContent className=\"p-8 text-center\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-primary to-secondary rounded-full mx-auto mb-6 flex items-center justify-center\">\n                <CheckCircle2 className=\"text-white text-3xl\" />\n              </div>\n              <h2 className=\"text-2xl font-bold text-slate-900 dark:text-white mb-2\">\n                🎉 Great Job Completing Your Interview!\n              </h2>\n              <p className=\"text-slate-600 dark:text-slate-300 text-lg\">\n                You've taken an important step in your career journey. Here's your detailed feedback.\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Overall Score Overview */}\n          <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-secondary rounded-full mx-auto mb-4 flex items-center justify-center\">\n                  <Award className=\"text-white text-2xl\" />\n                </div>\n                <div className={`text-4xl font-bold mb-2 ${getScoreColor(overallScore)}`} data-testid=\"overall-score\">\n                  {overallScore.toFixed(1)}\n                </div>\n                <div className=\"text-sm text-slate-600 dark:text-slate-400\">Overall Score</div>\n                <div className=\"text-xs text-slate-500 dark:text-slate-500 mt-1\">\n                  {getScoreLevel(overallScore)}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-blue-500 rounded-full mx-auto mb-4 flex items-center justify-center\">\n                  <MessageCircle className=\"text-white text-xl\" />\n                </div>\n                <div className={`text-4xl font-bold mb-2 ${getScoreColor(communicationScore)}`} data-testid=\"communication-score\">\n                  {communicationScore.toFixed(1)}\n                </div>\n                <div className=\"text-sm text-slate-600 dark:text-slate-400\">Communication</div>\n                <Progress value={communicationScore * 10} className=\"h-2 mt-2\" />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-green-500 rounded-full mx-auto mb-4 flex items-center justify-center\">\n                  <Code className=\"text-white text-xl\" />\n                </div>\n                <div className={`text-4xl font-bold mb-2 ${getScoreColor(technicalScore)}`} data-testid=\"technical-score\">\n                  {technicalScore.toFixed(1)}\n                </div>\n                <div className=\"text-sm text-slate-600 dark:text-slate-400\">Technical Skills</div>\n                <Progress value={technicalScore * 10} className=\"h-2 mt-2\" />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"w-16 h-16 bg-purple-500 rounded-full mx-auto mb-4 flex items-center justify-center\">\n                  <TrendingUp className=\"text-white text-xl\" />\n                </div>\n                <div className=\"text-4xl font-bold text-purple-600 dark:text-purple-400 mb-2\" data-testid=\"confidence-level\">\n                  {confidenceLevel.toFixed(0)}%\n                </div>\n                <div className=\"text-sm text-slate-600 dark:text-slate-400\">Confidence</div>\n                <Progress value={confidenceLevel} className=\"h-2 mt-2\" />\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Detailed Feedback */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              {/* Overall Feedback */}\n              {interview.feedback && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"h-5 w-5\" />\n                      Overall Performance Analysis\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"prose prose-slate dark:prose-invert max-w-none\">\n                      <p className=\"text-slate-700 dark:text-slate-300 leading-relaxed whitespace-pre-wrap\">\n                        {interview.feedback}\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Question by Question Breakdown */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Question Analysis</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {answeredQuestions.map((question: any, index: number) => (\n                    <div key={question.id} className=\"border-l-4 border-primary/30 pl-6\">\n                      <div className=\"flex items-start justify-between mb-3\">\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-slate-900 dark:text-white mb-2\">\n                            Question {index + 1}\n                          </h4>\n                          <p className=\"text-slate-600 dark:text-slate-400 text-sm mb-3\">\n                            {question.questionText}\n                          </p>\n                          <Badge variant=\"outline\" size=\"sm\">\n                            {question.questionType}\n                          </Badge>\n                        </div>\n                        {question.responseScore && (\n                          <div className=\"text-right ml-4\">\n                            <div className={`text-2xl font-bold ${getScoreColor(parseFloat(question.responseScore))}`}>\n                              {parseFloat(question.responseScore).toFixed(1)}\n                            </div>\n                            <div className=\"text-xs text-slate-500\">Score</div>\n                          </div>\n                        )}\n                      </div>\n                      \n                      {question.userResponse && (\n                        <div className=\"bg-slate-50 dark:bg-slate-800 rounded-lg p-4 mb-3\">\n                          <h5 className=\"font-medium text-slate-900 dark:text-white mb-2\">Your Response:</h5>\n                          <p className=\"text-slate-700 dark:text-slate-300 text-sm\">\n                            {question.userResponse}\n                          </p>\n                        </div>\n                      )}\n                      \n                      {question.responseFeedback && (\n                        <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4\">\n                          <h5 className=\"font-medium text-blue-900 dark:text-blue-300 mb-2\">AI Feedback:</h5>\n                          <p className=\"text-blue-800 dark:text-blue-200 text-sm\">\n                            {question.responseFeedback}\n                          </p>\n                        </div>\n                      )}\n                      \n                      {index < answeredQuestions.length - 1 && (\n                        <Separator className=\"mt-6\" />\n                      )}\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Interview Statistics and Next Steps */}\n            <div className=\"space-y-6\">\n              {/* Interview Statistics */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"h-5 w-5\" />\n                    Interview Statistics\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-slate-600 dark:text-slate-400\">Completion Rate</span>\n                    <div className=\"text-right\">\n                      <span className=\"font-medium\">{completionRate.toFixed(0)}%</span>\n                      <Progress value={completionRate} className=\"h-2 w-20 mt-1\" />\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600 dark:text-slate-400\">Questions Answered</span>\n                    <span className=\"font-medium\">\n                      {answeredQuestions.length}/{interview.questions?.length || 0}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600 dark:text-slate-400\">Interview Duration</span>\n                    <span className=\"font-medium\">\n                      {interview.duration ? `${interview.duration} min` : 'N/A'}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600 dark:text-slate-400\">Job Role</span>\n                    <span className=\"font-medium\">\n                      {interview.jobRole?.replace('_', ' ')}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-600 dark:text-slate-400\">Experience Level</span>\n                    <span className=\"font-medium\">{interview.experienceLevel}</span>\n                  </div>\n                  \n                  {interview.techStack && interview.techStack.length > 0 && (\n                    <div>\n                      <span className=\"text-slate-600 dark:text-slate-400 block mb-2\">Tech Stack</span>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {interview.techStack.map((tech: string) => (\n                          <Badge key={tech} variant=\"outline\" size=\"sm\">\n                            {tech}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Performance Comparison */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Target className=\"h-5 w-5\" />\n                    Performance Insights\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span className=\"text-slate-600 dark:text-slate-400\">vs. Average Candidate</span>\n                        <span className={`font-medium ${overallScore > 7 ? 'text-green-600' : 'text-yellow-600'}`}>\n                          {overallScore > 7 ? 'Above Average' : 'Average'}\n                        </span>\n                      </div>\n                      <Progress \n                        value={Math.min(100, (overallScore / 10) * 100)} \n                        className=\"h-2\" \n                      />\n                    </div>\n                    \n                    <div>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span className=\"text-slate-600 dark:text-slate-400\">Industry Benchmark</span>\n                        <span className={`font-medium ${overallScore > 8 ? 'text-green-600' : 'text-yellow-600'}`}>\n                          {overallScore > 8 ? 'Exceeds' : 'Meets'}\n                        </span>\n                      </div>\n                      <Progress \n                        value={Math.min(100, (overallScore / 10) * 100)} \n                        className=\"h-2\" \n                      />\n                    </div>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium text-slate-900 dark:text-white\">Key Strengths</h4>\n                    <ul className=\"text-sm text-slate-600 dark:text-slate-400 space-y-1\">\n                      {communicationScore > 7 && (\n                        <li className=\"flex items-center gap-2\">\n                          <Star className=\"h-3 w-3 text-green-500\" />\n                          Strong communication skills\n                        </li>\n                      )}\n                      {technicalScore > 7 && (\n                        <li className=\"flex items-center gap-2\">\n                          <Star className=\"h-3 w-3 text-green-500\" />\n                          Solid technical knowledge\n                        </li>\n                      )}\n                      {confidenceLevel > 75 && (\n                        <li className=\"flex items-center gap-2\">\n                          <Star className=\"h-3 w-3 text-green-500\" />\n                          High confidence level\n                        </li>\n                      )}\n                      {completionRate > 80 && (\n                        <li className=\"flex items-center gap-2\">\n                          <Star className=\"h-3 w-3 text-green-500\" />\n                          Great completion rate\n                        </li>\n                      )}\n                    </ul>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Next Steps */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"h-5 w-5\" />\n                    Next Steps\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    <Button \n                      className=\"w-full justify-start\" \n                      variant=\"outline\"\n                      asChild\n                      data-testid=\"button-practice-again\"\n                    >\n                      <Link href=\"/\">\n                        <Clock className=\"mr-2 h-4 w-4\" />\n                        Practice Another Interview\n                      </Link>\n                    </Button>\n                    \n                    <Button \n                      className=\"w-full justify-start\" \n                      variant=\"outline\"\n                      asChild\n                      data-testid=\"button-view-dashboard\"\n                    >\n                      <Link href=\"/dashboard\">\n                        <BarChart3 className=\"mr-2 h-4 w-4\" />\n                        View Progress Dashboard\n                      </Link>\n                    </Button>\n                    \n                    <Button \n                      className=\"w-full justify-start\" \n                      variant=\"outline\"\n                      data-testid=\"button-download-detailed\"\n                    >\n                      <Download className=\"mr-2 h-4 w-4\" />\n                      Download Detailed Report\n                    </Button>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-slate-600 dark:text-slate-400 mb-3\">\n                      Ready for the real thing?\n                    </p>\n                    <Button className=\"w-full\" data-testid=\"button-job-search\">\n                      Start Job Search\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21620},"client/src/components/interview-setup.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Mic, Code, Briefcase, X } from \"lucide-react\";\n\nconst interviewSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  jobRole: z.string().min(1, \"Job role is required\"),\n  experienceLevel: z.string().min(1, \"Experience level is required\"),\n  techStack: z.array(z.string()).default([]),\n  voiceEnabled: z.boolean().default(false),\n});\n\ntype InterviewFormData = z.infer<typeof interviewSchema>;\n\nconst jobRoles = [\n  { value: \"frontend_developer\", label: \"Frontend Developer\" },\n  { value: \"backend_developer\", label: \"Backend Developer\" },\n  { value: \"fullstack_developer\", label: \"Fullstack Developer\" },\n  { value: \"mobile_developer\", label: \"Mobile Developer\" },\n  { value: \"data_scientist\", label: \"Data Scientist\" },\n  { value: \"product_manager\", label: \"Product Manager\" },\n  { value: \"ux_designer\", label: \"UX Designer\" },\n  { value: \"devops_engineer\", label: \"DevOps Engineer\" },\n  { value: \"qa_engineer\", label: \"QA Engineer\" },\n  { value: \"software_architect\", label: \"Software Architect\" },\n];\n\nconst experienceLevels = [\n  { value: \"entry\", label: \"Entry Level (0-1 years)\" },\n  { value: \"junior\", label: \"Junior (1-3 years)\" },\n  { value: \"mid\", label: \"Mid Level (3-5 years)\" },\n  { value: \"senior\", label: \"Senior (5-8 years)\" },\n  { value: \"lead\", label: \"Lead (8+ years)\" },\n  { value: \"principal\", label: \"Principal (10+ years)\" },\n];\n\nconst commonTechStack = [\n  \"JavaScript\", \"TypeScript\", \"React\", \"Vue\", \"Angular\", \"Node.js\", \"Python\", \n  \"Java\", \"C#\", \"Go\", \"Rust\", \"PHP\", \"Ruby\", \"Swift\", \"Kotlin\", \"Flutter\",\n  \"PostgreSQL\", \"MySQL\", \"MongoDB\", \"Redis\", \"Docker\", \"Kubernetes\", \"AWS\", \n  \"Azure\", \"GCP\", \"GraphQL\", \"REST API\", \"Microservices\", \"System Design\"\n];\n\nexport function InterviewSetup() {\n  const [, setLocation] = useLocation();\n  const [customTech, setCustomTech] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<InterviewFormData>({\n    resolver: zodResolver(interviewSchema),\n    defaultValues: {\n      title: \"\",\n      jobRole: \"\",\n      experienceLevel: \"\",\n      techStack: [],\n      voiceEnabled: false,\n    },\n  });\n\n  const createInterviewMutation = useMutation({\n    mutationFn: async (data: InterviewFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/interviews\", data);\n      return response.json();\n    },\n    onSuccess: (interview) => {\n      toast({\n        title: \"Interview Created!\",\n        description: \"Your AI interview is ready. Good luck!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/interviews\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n      setLocation(`/interview/${interview.id}`);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create interview. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InterviewFormData) => {\n    createInterviewMutation.mutate(data);\n  };\n\n  const addTechStack = (tech: string) => {\n    const currentStack = form.getValues(\"techStack\");\n    if (!currentStack.includes(tech)) {\n      form.setValue(\"techStack\", [...currentStack, tech]);\n    }\n  };\n\n  const removeTechStack = (tech: string) => {\n    const currentStack = form.getValues(\"techStack\");\n    form.setValue(\"techStack\", currentStack.filter(t => t !== tech));\n  };\n\n  const addCustomTech = () => {\n    if (customTech.trim()) {\n      addTechStack(customTech.trim());\n      setCustomTech(\"\");\n    }\n  };\n\n  const watchedTechStack = form.watch(\"techStack\");\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Interview Title */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Interview Title</Label>\n            <Input\n              id=\"title\"\n              placeholder=\"e.g., Frontend Developer Interview - React Position\"\n              {...form.register(\"title\")}\n              data-testid=\"input-interview-title\"\n            />\n            {form.formState.errors.title && (\n              <p className=\"text-sm text-red-500\">{form.formState.errors.title.message}</p>\n            )}\n          </div>\n\n          {/* Job Role Selection */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"jobRole\">Job Role</Label>\n            <Select \n              onValueChange={(value) => form.setValue(\"jobRole\", value)}\n              data-testid=\"select-job-role\"\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select your target job role\" />\n              </SelectTrigger>\n              <SelectContent>\n                {jobRoles.map((role) => (\n                  <SelectItem key={role.value} value={role.value}>\n                    {role.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {form.formState.errors.jobRole && (\n              <p className=\"text-sm text-red-500\">{form.formState.errors.jobRole.message}</p>\n            )}\n          </div>\n\n          {/* Experience Level */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"experienceLevel\">Experience Level</Label>\n            <Select \n              onValueChange={(value) => form.setValue(\"experienceLevel\", value)}\n              data-testid=\"select-experience-level\"\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select your experience level\" />\n              </SelectTrigger>\n              <SelectContent>\n                {experienceLevels.map((level) => (\n                  <SelectItem key={level.value} value={level.value}>\n                    {level.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {form.formState.errors.experienceLevel && (\n              <p className=\"text-sm text-red-500\">{form.formState.errors.experienceLevel.message}</p>\n            )}\n          </div>\n\n          {/* Tech Stack Selection */}\n          <div className=\"space-y-2\">\n            <Label>Tech Stack & Skills</Label>\n            <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n              Select the technologies and skills relevant to your target position\n            </p>\n            \n            {/* Selected Tech Stack */}\n            {watchedTechStack.length > 0 && (\n              <div className=\"flex flex-wrap gap-2 p-3 bg-slate-50 dark:bg-slate-900 rounded-lg border\">\n                {watchedTechStack.map((tech) => (\n                  <Badge \n                    key={tech} \n                    variant=\"secondary\" \n                    className=\"flex items-center gap-1\"\n                    data-testid={`tech-badge-${tech}`}\n                  >\n                    {tech}\n                    <X \n                      className=\"h-3 w-3 cursor-pointer\" \n                      onClick={() => removeTechStack(tech)}\n                    />\n                  </Badge>\n                ))}\n              </div>\n            )}\n\n            {/* Common Tech Stack */}\n            <div className=\"space-y-3\">\n              <p className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">Popular Technologies:</p>\n              <div className=\"grid grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-2\">\n                {commonTechStack.map((tech) => (\n                  <Button\n                    key={tech}\n                    type=\"button\"\n                    variant={watchedTechStack.includes(tech) ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => watchedTechStack.includes(tech) ? removeTechStack(tech) : addTechStack(tech)}\n                    className=\"text-xs\"\n                    data-testid={`tech-button-${tech}`}\n                  >\n                    {tech}\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            {/* Custom Tech Stack */}\n            <div className=\"flex gap-2\">\n              <Input\n                placeholder=\"Add custom technology...\"\n                value={customTech}\n                onChange={(e) => setCustomTech(e.target.value)}\n                onKeyDown={(e) => e.key === 'Enter' && (e.preventDefault(), addCustomTech())}\n                data-testid=\"input-custom-tech\"\n              />\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={addCustomTech}\n                data-testid=\"button-add-tech\"\n              >\n                Add\n              </Button>\n            </div>\n          </div>\n\n          {/* Voice Interview Toggle */}\n          <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-primary/10 to-secondary/10 rounded-lg border\">\n            <div className=\"flex items-center space-x-3\">\n              <Mic className=\"h-5 w-5 text-primary\" />\n              <div>\n                <Label htmlFor=\"voiceEnabled\" className=\"text-base font-medium\">\n                  Voice-Enabled Interview\n                </Label>\n                <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                  Practice speaking out loud with real-time voice interaction\n                </p>\n              </div>\n            </div>\n            <Switch\n              id=\"voiceEnabled\"\n              {...form.register(\"voiceEnabled\")}\n              data-testid=\"switch-voice-enabled\"\n            />\n          </div>\n\n          {/* Submit Button */}\n          <Button \n            type=\"submit\" \n            className=\"w-full bg-primary hover:bg-primary/90 text-white\" \n            size=\"lg\"\n            disabled={createInterviewMutation.isPending}\n            data-testid=\"button-create-interview\"\n          >\n            {createInterviewMutation.isPending ? (\n              \"Creating Interview...\"\n            ) : (\n              <>\n                <Briefcase className=\"mr-2 h-5 w-5\" />\n                Start Interview\n              </>\n            )}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":11317},"client/src/components/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Mic, Moon, Sun, User, BarChart3, LogOut } from \"lucide-react\";\n\nexport function Navigation() {\n  const { user, isAuthenticated } = useAuth();\n  const { theme, setTheme } = useTheme();\n  const [location] = useLocation();\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  const getInitials = (firstName?: string, lastName?: string, email?: string) => {\n    if (firstName && lastName) {\n      return `${firstName[0]}${lastName[0]}`.toUpperCase();\n    }\n    if (firstName) {\n      return firstName[0].toUpperCase();\n    }\n    if (email) {\n      return email[0].toUpperCase();\n    }\n    return \"U\";\n  };\n\n  return (\n    <nav className=\"bg-white dark:bg-slate-800 shadow-sm border-b border-slate-200 dark:border-slate-700 fixed w-full top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo and Brand */}\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\" data-testid=\"nav-home-link\">\n              <div className=\"flex items-center space-x-2 cursor-pointer\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center\">\n                  <Mic className=\"text-white text-sm\" />\n                </div>\n                <span className=\"text-xl font-bold text-slate-900 dark:text-white\">\n                  InterviewAI\n                </span>\n              </div>\n            </Link>\n          </div>\n\n          {/* Navigation Links (Desktop) */}\n          {isAuthenticated && (\n            <div className=\"hidden md:flex items-center space-x-8\">\n              <Link href=\"/dashboard\">\n                <a \n                  className={`text-slate-600 dark:text-slate-300 hover:text-primary transition-colors ${\n                    location === '/dashboard' ? 'text-primary font-medium' : ''\n                  }`}\n                  data-testid=\"nav-dashboard-link\"\n                >\n                  Dashboard\n                </a>\n              </Link>\n            </div>\n          )}\n\n          {/* Auth Buttons & Theme Toggle */}\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleTheme}\n              data-testid=\"theme-toggle\"\n            >\n              <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n              <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n              <span className=\"sr-only\">Toggle theme</span>\n            </Button>\n\n            {!isAuthenticated ? (\n              <>\n                <Button \n                  variant=\"ghost\" \n                  asChild\n                  data-testid=\"button-signin\"\n                >\n                  <a href=\"/api/login\">Sign In</a>\n                </Button>\n                <Button \n                  asChild\n                  data-testid=\"button-getstarted\"\n                >\n                  <a href=\"/api/login\">Get Started</a>\n                </Button>\n              </>\n            ) : (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\" data-testid=\"user-menu-trigger\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={user?.profileImageUrl || ''} alt={user?.firstName || 'User'} />\n                      <AvatarFallback>\n                        {getInitials(user?.firstName || undefined, user?.lastName || undefined, user?.email || undefined)}\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/dashboard\">\n                      <BarChart3 className=\"mr-2 h-4 w-4\" />\n                      <span data-testid=\"menu-dashboard\">Dashboard</span>\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem asChild>\n                    <a href=\"/api/logout\" data-testid=\"menu-logout\">\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      <span>Log out</span>\n                    </a>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            )}\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5083},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1610},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/hooks/useDashboard.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { Interview } from \"@shared/schema\";\n\nexport interface DashboardStats {\n  totalInterviews: number;\n  averageScore: number;\n  confidenceLevel: number;\n  practiceTime: number;\n  recentInterviews: Interview[];\n}\n\nexport function useDashboard() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    retry: false,\n  });\n\n  const { data: interviews = [], isLoading: interviewsLoading } = useQuery<Interview[]>({\n    queryKey: [\"/api/interviews\"],\n    retry: false,\n  });\n\n  return {\n    stats: stats || {\n      totalInterviews: 0,\n      averageScore: 0,\n      confidenceLevel: 0,\n      practiceTime: 0,\n      recentInterviews: [],\n    },\n    interviews,\n    isLoading,\n    interviewsLoading,\n  };\n}","size_bytes":810},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useDashboard } from \"@/hooks/useDashboard\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Navigation } from \"@/components/navigation\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Link } from \"wouter\";\nimport type { Interview } from \"@shared/schema\";\nimport { \n  BarChart3, \n  Clock, \n  TrendingUp, \n  Users, \n  Play,\n  Calendar,\n  Target,\n  Award\n} from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { stats, interviews, isLoading: dashboardLoading } = useDashboard();\n  const { toast } = useToast();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\" />;\n  }\n\n  const sortedInterviews = interviews.sort((a: Interview, b: Interview) => \n    new Date(b.createdAt || '').getTime() - new Date(a.createdAt || '').getTime()\n  );\n\n  const completedInterviews = sortedInterviews.filter((i: Interview) => i.status === 'completed');\n  const inProgressInterviews = sortedInterviews.filter((i: Interview) => i.status === 'in_progress');\n\n  const getScoreColor = (score: number) => {\n    if (score >= 8) return 'text-green-600 dark:text-green-400';\n    if (score >= 6) return 'text-yellow-600 dark:text-yellow-400';\n    return 'text-red-600 dark:text-red-400';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const now = new Date();\n    const date = new Date(dateString);\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\n    return `${Math.floor(diffInMinutes / 1440)}d ago`;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\">\n      <Navigation />\n      \n      <div className=\"pt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-slate-900 dark:text-white mb-2\">\n                Interview Dashboard\n              </h1>\n              <p className=\"text-lg text-slate-600 dark:text-slate-300\">\n                Track your progress and manage your interview practice\n              </p>\n            </div>\n            <Link href=\"/\">\n              <Button data-testid=\"button-new-interview\">\n                <Play className=\"mr-2 h-4 w-4\" />\n                New Interview\n              </Button>\n            </Link>\n          </div>\n\n          {/* Stats Overview */}\n          <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center\">\n                    <BarChart3 className=\"text-white\" />\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    +{Math.max(0, stats.totalInterviews - 5)} this week\n                  </Badge>\n                </div>\n                <div className=\"text-3xl font-bold text-blue-600 dark:text-blue-400\" data-testid=\"stat-total-interviews\">\n                  {stats.totalInterviews}\n                </div>\n                <div className=\"text-sm text-blue-600/70 dark:text-blue-400/70\">Total Interviews</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center\">\n                    <Award className=\"text-white\" />\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    ↑ {stats.averageScore > 5 ? '0.4' : '0.0'}\n                  </Badge>\n                </div>\n                <div className=\"text-3xl font-bold text-green-600 dark:text-green-400\" data-testid=\"stat-average-score\">\n                  {stats.averageScore.toFixed(1)}\n                </div>\n                <div className=\"text-sm text-green-600/70 dark:text-green-400/70\">Average Score</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"w-12 h-12 bg-purple-500 rounded-xl flex items-center justify-center\">\n                    <TrendingUp className=\"text-white\" />\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    ↑ {stats.confidenceLevel > 50 ? '12%' : '0%'}\n                  </Badge>\n                </div>\n                <div className=\"text-3xl font-bold text-purple-600 dark:text-purple-400\" data-testid=\"stat-confidence\">\n                  {stats.confidenceLevel.toFixed(0)}%\n                </div>\n                <div className=\"text-sm text-purple-600/70 dark:text-purple-400/70\">Confidence Level</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"w-12 h-12 bg-orange-500 rounded-xl flex items-center justify-center\">\n                    <Clock className=\"text-white\" />\n                  </div>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    This month\n                  </Badge>\n                </div>\n                <div className=\"text-3xl font-bold text-orange-600 dark:text-orange-400\" data-testid=\"stat-practice-time\">\n                  {stats.practiceTime}h\n                </div>\n                <div className=\"text-sm text-orange-600/70 dark:text-orange-400/70\">Practice Time</div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Recent Interviews and Performance Chart */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    Recent Interviews\n                    <div className=\"text-sm font-normal text-slate-500 dark:text-slate-400\">\n                      {sortedInterviews.length} total interviews\n                    </div>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {dashboardLoading ? (\n                    <div className=\"space-y-4\">\n                      {[1, 2, 3, 4].map((i) => (\n                        <div key={i} className=\"animate-pulse\">\n                          <div className=\"h-20 bg-slate-200 dark:bg-slate-700 rounded-xl\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : sortedInterviews.length === 0 ? (\n                    <div className=\"text-center py-12\">\n                      <Target className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium text-slate-900 dark:text-white mb-2\">\n                        No interviews yet\n                      </h3>\n                      <p className=\"text-slate-500 dark:text-slate-400 mb-6\">\n                        Start practicing with your first AI-powered interview\n                      </p>\n                      <Link href=\"/\">\n                        <Button data-testid=\"button-start-first-interview\">\n                          <Play className=\"mr-2 h-4 w-4\" />\n                          Start Your First Interview\n                        </Button>\n                      </Link>\n                    </div>\n                  ) : (\n                    sortedInterviews.map((interview: any) => (\n                      <div \n                        key={interview.id} \n                        className=\"bg-slate-50 dark:bg-slate-900 rounded-xl p-6 border border-slate-200 dark:border-slate-700\"\n                        data-testid={`interview-card-${interview.id}`}\n                      >\n                        <div className=\"flex items-center justify-between mb-4\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-500 rounded-xl flex items-center justify-center\">\n                              <BarChart3 className=\"text-white\" />\n                            </div>\n                            <div>\n                              <h5 className=\"font-semibold text-slate-900 dark:text-white\">\n                                {interview.title}\n                              </h5>\n                              <p className=\"text-sm text-slate-500 dark:text-slate-400\">\n                                {formatTimeAgo(interview.createdAt)}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            {interview.overallScore ? (\n                              <>\n                                <div className={`text-2xl font-bold ${getScoreColor(parseFloat(interview.overallScore))}`}>\n                                  {parseFloat(interview.overallScore).toFixed(1)}\n                                </div>\n                                <div className=\"text-xs text-slate-500 dark:text-slate-400\">Score</div>\n                              </>\n                            ) : (\n                              <Badge \n                                variant={interview.status === 'in_progress' ? 'default' : 'secondary'}\n                                data-testid={`interview-status-${interview.id}`}\n                              >\n                                {interview.status}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span className=\"text-slate-600 dark:text-slate-400\">\n                              {interview.jobRole.replace('_', ' ')} • {interview.experienceLevel}\n                            </span>\n                            {interview.technicalScore && (\n                              <span className=\"font-medium\">\n                                Technical: {parseFloat(interview.technicalScore).toFixed(1)}\n                              </span>\n                            )}\n                          </div>\n                          \n                          {interview.overallScore && (\n                            <div className=\"w-full bg-slate-200 dark:bg-slate-700 rounded-full h-2\">\n                              <div \n                                className=\"bg-gradient-to-r from-green-400 to-green-500 h-2 rounded-full\" \n                                style={{ width: `${Math.min(100, parseFloat(interview.overallScore) * 10)}%` }}\n                              ></div>\n                            </div>\n                          )}\n                          \n                          {interview.status === 'in_progress' && (\n                            <Link href={`/interview/${interview.id}`}>\n                              <Button size=\"sm\" className=\"mt-2\" data-testid={`button-continue-${interview.id}`}>\n                                <Play className=\"mr-2 h-4 w-4\" />\n                                Continue Interview\n                              </Button>\n                            </Link>\n                          )}\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Performance Trends */}\n            <div>\n              <Card>\n                <CardHeader>\n                  <CardTitle>Performance Trends</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-48 flex items-center justify-center text-slate-400 dark:text-slate-500 border-2 border-dashed border-slate-300 dark:border-slate-600 rounded-lg mb-6\">\n                    <div className=\"text-center\">\n                      <BarChart3 className=\"h-8 w-8 mx-auto mb-2\" />\n                      <p>Performance Chart</p>\n                      <p className=\"text-xs mt-1\">Coming Soon</p>\n                    </div>\n                  </div>\n                  \n                  {/* Quick Stats */}\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-primary\">\n                        {stats.averageScore > 5 ? '↑15%' : '→0%'}\n                      </div>\n                      <div className=\"text-xs text-slate-500 dark:text-slate-400\">Improvement</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-500\">\n                        {stats.totalInterviews > 10 ? 'Top 20%' : 'Getting Started'}\n                      </div>\n                      <div className=\"text-xs text-slate-500 dark:text-slate-400\">Ranking</div>\n                    </div>\n                  </div>\n\n                  {/* Progress Breakdown */}\n                  {completedInterviews.length > 0 && (\n                    <div className=\"mt-6 space-y-4\">\n                      <h4 className=\"font-medium text-slate-900 dark:text-white\">Skills Breakdown</h4>\n                      \n                      <div className=\"space-y-3\">\n                        <div>\n                          <div className=\"flex justify-between text-sm mb-1\">\n                            <span className=\"text-slate-600 dark:text-slate-400\">Communication</span>\n                            <span className=\"font-medium\">\n                              {stats.averageScore > 0 ? (stats.averageScore * 0.9).toFixed(1) : '0.0'}\n                            </span>\n                          </div>\n                          <Progress value={stats.averageScore * 9} className=\"h-2\" />\n                        </div>\n                        \n                        <div>\n                          <div className=\"flex justify-between text-sm mb-1\">\n                            <span className=\"text-slate-600 dark:text-slate-400\">Technical Knowledge</span>\n                            <span className=\"font-medium\">\n                              {stats.averageScore.toFixed(1)}\n                            </span>\n                          </div>\n                          <Progress value={stats.averageScore * 10} className=\"h-2\" />\n                        </div>\n                        \n                        <div>\n                          <div className=\"flex justify-between text-sm mb-1\">\n                            <span className=\"text-slate-600 dark:text-slate-400\">Confidence</span>\n                            <span className=\"font-medium\">\n                              {stats.confidenceLevel.toFixed(0)}%\n                            </span>\n                          </div>\n                          <Progress value={stats.confidenceLevel} className=\"h-2\" />\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16667},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useDashboard } from \"@/hooks/useDashboard\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Navigation } from \"@/components/navigation\";\nimport { InterviewSetup } from \"@/components/interview-setup\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport type { Interview } from \"@shared/schema\";\nimport { BarChart3, Clock, TrendingUp, Plus, Play } from \"lucide-react\";\n\nexport default function Home() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { stats, interviews, isLoading: dashboardLoading } = useDashboard();\n  const { toast } = useToast();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading || !isAuthenticated) {\n    return <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\" />;\n  }\n\n  const recentInterviews = interviews.slice(0, 3);\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\">\n      <Navigation />\n      \n      <div className=\"pt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {/* Welcome Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-slate-900 dark:text-white mb-2\">\n              Welcome back, {user?.firstName || 'there'}! 👋\n            </h1>\n            <p className=\"text-lg text-slate-600 dark:text-slate-300\">\n              Ready to practice your interview skills? Let's get started.\n            </p>\n          </div>\n\n          {/* Stats Overview */}\n          <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">Total Interviews</p>\n                    <p className=\"text-2xl font-bold text-slate-900 dark:text-white\" data-testid=\"stat-total-interviews\">\n                      {stats.totalInterviews}\n                    </p>\n                  </div>\n                  <BarChart3 className=\"h-8 w-8 text-blue-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">Average Score</p>\n                    <p className=\"text-2xl font-bold text-slate-900 dark:text-white\" data-testid=\"stat-average-score\">\n                      {stats.averageScore.toFixed(1)}\n                    </p>\n                  </div>\n                  <TrendingUp className=\"h-8 w-8 text-green-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">Confidence</p>\n                    <p className=\"text-2xl font-bold text-slate-900 dark:text-white\" data-testid=\"stat-confidence\">\n                      {stats.confidenceLevel.toFixed(0)}%\n                    </p>\n                  </div>\n                  <TrendingUp className=\"h-8 w-8 text-purple-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-600 dark:text-slate-400\">Practice Time</p>\n                    <p className=\"text-2xl font-bold text-slate-900 dark:text-white\" data-testid=\"stat-practice-time\">\n                      {stats.practiceTime}h\n                    </p>\n                  </div>\n                  <Clock className=\"h-8 w-8 text-orange-600\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Quick Start */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Plus className=\"h-5 w-5\" />\n                    Start New Interview\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <InterviewSetup />\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recent Interviews */}\n            <div>\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    Recent Interviews\n                    <Link href=\"/dashboard\">\n                      <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-view-all-interviews\">\n                        View All\n                      </Button>\n                    </Link>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {dashboardLoading ? (\n                    <div className=\"space-y-4\">\n                      {[1, 2, 3].map((i) => (\n                        <div key={i} className=\"animate-pulse\">\n                          <div className=\"h-16 bg-slate-200 dark:bg-slate-700 rounded\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : recentInterviews.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-slate-500 dark:text-slate-400 mb-4\">\n                        No interviews yet\n                      </p>\n                      <p className=\"text-sm text-slate-400 dark:text-slate-500\">\n                        Start your first interview to see it here\n                      </p>\n                    </div>\n                  ) : (\n                    recentInterviews.map((interview: any) => (\n                      <div key={interview.id} className=\"border border-slate-200 dark:border-slate-700 rounded-lg p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-medium text-slate-900 dark:text-white\">\n                            {interview.title}\n                          </h4>\n                          <Badge \n                            variant={interview.status === 'completed' ? 'default' : 'secondary'}\n                            data-testid={`interview-status-${interview.id}`}\n                          >\n                            {interview.status}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-slate-600 dark:text-slate-400 mb-2\">\n                          {interview.jobRole.replace('_', ' ')} • {interview.experienceLevel}\n                        </p>\n                        {interview.overallScore && (\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-sm text-slate-500 dark:text-slate-400\">Score:</span>\n                            <span className=\"font-medium text-slate-900 dark:text-white\">\n                              {parseFloat(interview.overallScore).toFixed(1)}/10\n                            </span>\n                          </div>\n                        )}\n                        {interview.status === 'in_progress' && (\n                          <Link href={`/interview/${interview.id}`}>\n                            <Button size=\"sm\" className=\"mt-2 w-full\" data-testid={`button-continue-${interview.id}`}>\n                              <Play className=\"mr-2 h-4 w-4\" />\n                              Continue Interview\n                            </Button>\n                          </Link>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8732},"client/src/pages/interview.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Navigation } from \"@/components/navigation\";\nimport { InterviewFeedback } from \"@/components/interview-feedback\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  Mic, \n  MicOff, \n  Play, \n  Pause, \n  SkipForward, \n  Clock, \n  User,\n  CheckCircle2,\n  Circle,\n  ArrowLeft,\n  Volume2,\n  VolumeX\n} from \"lucide-react\";\n\nexport default function Interview() {\n  const params = useParams();\n  const interviewId = params.id;\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Interview state\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [userResponse, setUserResponse] = useState(\"\");\n  const [timeSpent, setTimeSpent] = useState(0);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const [startTime, setStartTime] = useState<Date | null>(null);\n  const [interviewStartTime, setInterviewStartTime] = useState<Date | null>(null);\n  const [notes, setNotes] = useState(\"\");\n  const [showFeedback, setShowFeedback] = useState(false);\n\n  // Voice state\n  const [isMuted, setIsMuted] = useState(false);\n  const [isListening, setIsListening] = useState(false);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const recognitionRef = useRef<any>(null);\n\n  // Fetch interview data\n  const { data: interview, isLoading, error } = useQuery({\n    queryKey: [\"/api/interviews\", interviewId],\n    retry: false,\n    enabled: !!interviewId,\n  });\n\n  // Submit response mutation\n  const submitResponseMutation = useMutation({\n    mutationFn: async ({ questionId, response, transcript, timeSpent }: {\n      questionId: string;\n      response: string;\n      transcript?: string;\n      timeSpent: number;\n    }) => {\n      const res = await apiRequest(\"POST\", `/api/questions/${questionId}/response`, {\n        response,\n        transcript,\n        timeSpent,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Response Submitted\",\n        description: \"Your answer has been recorded and analyzed.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit response. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Complete interview mutation\n  const completeInterviewMutation = useMutation({\n    mutationFn: async () => {\n      const duration = interviewStartTime \n        ? Math.floor((new Date().getTime() - interviewStartTime.getTime()) / 1000 / 60)\n        : 30;\n      \n      const res = await apiRequest(\"POST\", `/api/interviews/${interviewId}/complete`, {\n        duration,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Interview Completed!\",\n        description: \"Great job! Your feedback is ready.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/interviews\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n      setShowFeedback(true);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to complete interview. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Timer effect\n  useEffect(() => {\n    if (!isPaused && startTime && !showFeedback) {\n      const interval = setInterval(() => {\n        setTimeSpent(Math.floor((new Date().getTime() - startTime.getTime()) / 1000));\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [isPaused, startTime, showFeedback]);\n\n  // Start interview effect\n  useEffect(() => {\n    if (interview && !interviewStartTime) {\n      setInterviewStartTime(new Date());\n      setStartTime(new Date());\n    }\n  }, [interview, interviewStartTime]);\n\n  // Speech recognition setup\n  useEffect(() => {\n    if (typeof window !== 'undefined' && 'webkitSpeechRecognition' in window) {\n      const SpeechRecognition = (window as any).webkitSpeechRecognition;\n      recognitionRef.current = new SpeechRecognition();\n      recognitionRef.current.continuous = true;\n      recognitionRef.current.interimResults = true;\n      recognitionRef.current.lang = 'en-US';\n\n      recognitionRef.current.onresult = (event: any) => {\n        let finalTranscript = '';\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          if (event.results[i].isFinal) {\n            finalTranscript += event.results[i][0].transcript;\n          }\n        }\n        if (finalTranscript) {\n          setUserResponse(prev => prev + ' ' + finalTranscript);\n        }\n      };\n\n      recognitionRef.current.onerror = (event: any) => {\n        console.error('Speech recognition error:', event.error);\n        setIsListening(false);\n      };\n\n      recognitionRef.current.onend = () => {\n        setIsListening(false);\n      };\n    }\n  }, []);\n\n  // Auth check\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  const toggleRecording = () => {\n    if (isListening) {\n      recognitionRef.current?.stop();\n      setIsListening(false);\n    } else {\n      recognitionRef.current?.start();\n      setIsListening(true);\n    }\n  };\n\n  const toggleMute = () => {\n    setIsMuted(!isMuted);\n  };\n\n  const pauseInterview = () => {\n    setIsPaused(!isPaused);\n    if (!isPaused) {\n      recognitionRef.current?.stop();\n      setIsListening(false);\n    }\n  };\n\n  const submitResponse = async () => {\n    if (!interview?.questions[currentQuestionIndex] || !userResponse.trim()) {\n      toast({\n        title: \"Missing Response\",\n        description: \"Please provide an answer before continuing.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const question = interview.questions[currentQuestionIndex];\n    await submitResponseMutation.mutateAsync({\n      questionId: question.id,\n      response: userResponse.trim(),\n      transcript: isListening ? userResponse : undefined,\n      timeSpent,\n    });\n\n    // Move to next question or complete\n    if (currentQuestionIndex < interview.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setUserResponse(\"\");\n      setTimeSpent(0);\n      setStartTime(new Date());\n    } else {\n      await completeInterviewMutation.mutateAsync();\n    }\n  };\n\n  const skipQuestion = () => {\n    if (currentQuestionIndex < interview.questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n      setUserResponse(\"\");\n      setTimeSpent(0);\n      setStartTime(new Date());\n    }\n  };\n\n  const endInterview = async () => {\n    if (confirm(\"Are you sure you want to end this interview? Your progress will be saved.\")) {\n      await completeInterviewMutation.mutateAsync();\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  if (authLoading || !isAuthenticated) {\n    return <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\" />;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\">\n        <Navigation />\n        <div className=\"pt-16 flex items-center justify-center min-h-screen\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-slate-600 dark:text-slate-300\">Loading interview...</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !interview) {\n    return (\n      <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\">\n        <Navigation />\n        <div className=\"pt-16 flex items-center justify-center min-h-screen\">\n          <Card className=\"w-full max-w-md mx-4\">\n            <CardContent className=\"pt-6 text-center\">\n              <h1 className=\"text-2xl font-bold text-slate-900 dark:text-white mb-4\">\n                Interview Not Found\n              </h1>\n              <p className=\"text-slate-600 dark:text-slate-300 mb-6\">\n                The interview you're looking for doesn't exist or you don't have access to it.\n              </p>\n              <Button asChild data-testid=\"button-back-home\">\n                <a href=\"/\">\n                  <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                  Back to Home\n                </a>\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (showFeedback) {\n    return <InterviewFeedback interviewId={interviewId!} />;\n  }\n\n  const currentQuestion = interview.questions[currentQuestionIndex];\n  const progress = ((currentQuestionIndex + 1) / interview.questions.length) * 100;\n  const totalInterviewTime = interviewStartTime \n    ? Math.floor((new Date().getTime() - interviewStartTime.getTime()) / 1000)\n    : 0;\n\n  return (\n    <div className=\"min-h-screen bg-slate-900\">\n      <Navigation />\n      \n      <div className=\"pt-16\">\n        {/* Interview Header */}\n        <div className=\"bg-slate-800 px-6 py-4 border-b border-slate-700\">\n          <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-red-400 rounded-full animate-pulse\"></div>\n                <span className=\"text-red-400 text-sm font-medium\">LIVE INTERVIEW</span>\n              </div>\n              <div className=\"text-slate-400 text-sm\">{interview.title}</div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-slate-400 text-sm\">\n                {formatTime(totalInterviewTime)} / 30:00\n              </div>\n              <Button \n                variant=\"destructive\"\n                size=\"sm\"\n                onClick={endInterview}\n                disabled={completeInterviewMutation.isPending}\n                data-testid=\"button-end-interview\"\n              >\n                End Interview\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Main Interview Area */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              {/* AI Interviewer Section */}\n              <Card className=\"bg-slate-800 border-slate-700\">\n                <CardContent className=\"p-8 text-center\">\n                  <div className=\"w-24 h-24 bg-gradient-to-br from-primary to-secondary rounded-full mx-auto mb-6 flex items-center justify-center animate-pulse\">\n                    <User className=\"text-white text-3xl\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-white mb-2\">Alex - AI Interviewer</h3>\n                  <p className=\"text-slate-300 text-sm\">\n                    {interview.jobRole.replace('_', ' ')} Technical Lead\n                  </p>\n                </CardContent>\n              </Card>\n\n              {/* Current Question */}\n              <Card className=\"bg-slate-800 border-slate-700\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0\">\n                      <span className=\"text-white text-sm font-semibold\">\n                        {currentQuestionIndex + 1}\n                      </span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h4 className=\"text-white font-medium mb-2\">\n                        Question {currentQuestionIndex + 1} of {interview.questions.length}\n                      </h4>\n                      <p className=\"text-slate-300 leading-relaxed text-lg\">\n                        {currentQuestion?.questionText}\n                      </p>\n                      <Badge \n                        variant=\"outline\" \n                        className=\"mt-3 text-slate-400 border-slate-600\"\n                      >\n                        {currentQuestion?.questionType}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Response Area */}\n              <Card className=\"bg-slate-800 border-slate-700\">\n                <CardContent className=\"p-6\">\n                  <h4 className=\"text-white font-medium mb-4\">Your Response</h4>\n                  <Textarea\n                    placeholder=\"Type your answer here or use voice recording...\"\n                    value={userResponse}\n                    onChange={(e) => setUserResponse(e.target.value)}\n                    className=\"bg-slate-700 border-slate-600 text-white placeholder-slate-400 min-h-[120px] resize-none\"\n                    data-testid=\"textarea-response\"\n                  />\n                  \n                  <div className=\"flex items-center justify-between mt-4\">\n                    <div className=\"text-sm text-slate-400\">\n                      Time on question: {formatTime(timeSpent)}\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={skipQuestion}\n                        disabled={currentQuestionIndex >= interview.questions.length - 1}\n                        data-testid=\"button-skip-question\"\n                      >\n                        <SkipForward className=\"mr-2 h-4 w-4\" />\n                        Skip\n                      </Button>\n                      <Button\n                        onClick={submitResponse}\n                        disabled={submitResponseMutation.isPending || !userResponse.trim()}\n                        data-testid=\"button-submit-response\"\n                      >\n                        {submitResponseMutation.isPending ? (\n                          \"Submitting...\"\n                        ) : currentQuestionIndex < interview.questions.length - 1 ? (\n                          \"Next Question\"\n                        ) : (\n                          \"Complete Interview\"\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Voice Controls */}\n              {interview.voiceEnabled && (\n                <Card className=\"bg-slate-800 border-slate-700\">\n                  <CardContent className=\"p-6\">\n                    <h4 className=\"text-white font-medium mb-4\">Voice Controls</h4>\n                    <div className=\"flex items-center justify-center space-x-6\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"lg\"\n                        onClick={toggleMute}\n                        className=\"w-16 h-16 bg-slate-700 hover:bg-slate-600 rounded-full\"\n                        data-testid=\"button-toggle-mute\"\n                      >\n                        {isMuted ? (\n                          <VolumeX className=\"text-white text-xl\" />\n                        ) : (\n                          <Volume2 className=\"text-white text-xl\" />\n                        )}\n                      </Button>\n                      \n                      <Button\n                        size=\"lg\"\n                        onClick={pauseInterview}\n                        className=\"w-20 h-20 bg-primary hover:bg-primary/90 rounded-full\"\n                        data-testid=\"button-pause-interview\"\n                      >\n                        {isPaused ? (\n                          <Play className=\"text-white text-2xl\" />\n                        ) : (\n                          <Pause className=\"text-white text-2xl\" />\n                        )}\n                      </Button>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"lg\"\n                        onClick={toggleRecording}\n                        className={`w-16 h-16 rounded-full ${\n                          isListening \n                            ? 'bg-red-500 hover:bg-red-600' \n                            : 'bg-slate-700 hover:bg-slate-600'\n                        }`}\n                        data-testid=\"button-toggle-recording\"\n                      >\n                        {isListening ? (\n                          <MicOff className=\"text-white text-xl\" />\n                        ) : (\n                          <Mic className=\"text-white text-xl\" />\n                        )}\n                      </Button>\n                    </div>\n                    \n                    {/* Voice Indicator */}\n                    <div className=\"mt-4 text-center\">\n                      <div className=\"inline-flex items-center space-x-2\">\n                        <div className={`w-2 h-2 rounded-full ${\n                          isListening ? 'bg-green-400 animate-pulse' : 'bg-slate-500'\n                        }`}></div>\n                        <span className={`text-sm ${\n                          isListening ? 'text-green-400' : 'text-slate-500'\n                        }`}>\n                          {isListening ? 'Listening...' : 'Click mic to start recording'}\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n\n            {/* Interview Progress & Notes */}\n            <div className=\"space-y-6\">\n              {/* Progress */}\n              <Card className=\"bg-slate-800 border-slate-700\">\n                <CardContent className=\"p-6\">\n                  <h4 className=\"text-white font-medium mb-4\">Interview Progress</h4>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-2\">\n                        <span className=\"text-slate-400\">Questions</span>\n                        <span className=\"text-white\">\n                          {currentQuestionIndex + 1}/{interview.questions.length}\n                        </span>\n                      </div>\n                      <Progress value={progress} className=\"h-2\" />\n                    </div>\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-2\">\n                        <span className=\"text-slate-400\">Time</span>\n                        <span className=\"text-white\">{formatTime(totalInterviewTime)}</span>\n                      </div>\n                      <Progress \n                        value={Math.min(100, (totalInterviewTime / 1800) * 100)} \n                        className=\"h-2\" \n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Question Overview */}\n              <Card className=\"bg-slate-800 border-slate-700\">\n                <CardContent className=\"p-6\">\n                  <h4 className=\"text-white font-medium mb-4\">Questions Overview</h4>\n                  <div className=\"space-y-2\">\n                    {interview.questions.map((question: any, index: number) => (\n                      <div \n                        key={question.id} \n                        className={`flex items-center space-x-3 p-2 rounded ${\n                          index === currentQuestionIndex \n                            ? 'bg-primary/20 border border-primary/30' \n                            : ''\n                        }`}\n                      >\n                        {index < currentQuestionIndex ? (\n                          <CheckCircle2 className=\"h-4 w-4 text-green-400\" />\n                        ) : index === currentQuestionIndex ? (\n                          <div className=\"h-4 w-4 bg-primary rounded-full\"></div>\n                        ) : (\n                          <Circle className=\"h-4 w-4 text-slate-500\" />\n                        )}\n                        <span className={`text-sm ${\n                          index === currentQuestionIndex \n                            ? 'text-white font-medium' \n                            : 'text-slate-400'\n                        }`}>\n                          Question {index + 1}\n                        </span>\n                        <Badge \n                          variant=\"outline\" \n                          size=\"sm\"\n                          className=\"text-xs text-slate-400 border-slate-600\"\n                        >\n                          {question.questionType}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Quick Notes */}\n              <Card className=\"bg-slate-800 border-slate-700\">\n                <CardContent className=\"p-6\">\n                  <h4 className=\"text-white font-medium mb-4\">Quick Notes</h4>\n                  <Textarea\n                    placeholder=\"Jot down key points...\"\n                    value={notes}\n                    onChange={(e) => setNotes(e.target.value)}\n                    className=\"w-full bg-slate-700 border border-slate-600 rounded-lg text-white placeholder-slate-400 text-sm resize-none\"\n                    rows={4}\n                    data-testid=\"textarea-notes\"\n                  />\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":23211},"client/src/pages/landing.tsx":{"content":"import { Navigation } from \"@/components/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Mic, Brain, BarChart3, Gauge, Palette, Zap, Play, Video, Check, Clock } from \"lucide-react\";\n\nexport default function Landing() {\n  const features = [\n    {\n      icon: Mic,\n      title: \"Voice-Enabled Mock Interviews\",\n      description: \"Practice with AI voice agents that simulate real interview conversations. Get comfortable with verbal communication and timing.\",\n      gradient: \"from-primary to-blue-600\"\n    },\n    {\n      icon: Brain,\n      title: \"Dynamic Question Generation\",\n      description: \"AI-powered questions tailored to your specific job role, tech stack, and experience level using Google Gemini.\",\n      gradient: \"from-secondary to-purple-600\"\n    },\n    {\n      icon: BarChart3,\n      title: \"AI Feedback & Scoring\",\n      description: \"Receive detailed feedback on communication skills, confidence levels, and technical knowledge with actionable insights.\",\n      gradient: \"from-green-500 to-emerald-600\"\n    },\n    {\n      icon: Gauge,\n      title: \"Comprehensive Dashboard\",\n      description: \"Track your progress, view interview history, and analyze performance trends with detailed analytics and insights.\",\n      gradient: \"from-orange-500 to-red-600\"\n    },\n    {\n      icon: Palette,\n      title: \"Modern UI/UX\",\n      description: \"Beautiful, responsive interface built with Tailwind CSS and shadcn components. Works seamlessly on all devices.\",\n      gradient: \"from-pink-500 to-rose-600\"\n    },\n    {\n      icon: Zap,\n      title: \"Real-time Processing\",\n      description: \"Instant voice processing and transcription with LiveKit integration for seamless interview experiences.\",\n      gradient: \"from-cyan-500 to-blue-600\"\n    }\n  ];\n\n  const steps = [\n    {\n      number: 1,\n      title: \"Choose Your Role\",\n      description: \"Select your target job role, tech stack, and experience level. Our AI will customize questions specifically for your needs.\",\n      color: \"from-primary to-blue-600\"\n    },\n    {\n      number: 2,\n      title: \"Practice with AI\",\n      description: \"Engage in natural voice conversations with our AI interviewer. Practice answering questions in real-time with instant feedback.\",\n      color: \"from-secondary to-purple-600\"\n    },\n    {\n      number: 3,\n      title: \"Improve & Succeed\",\n      description: \"Review detailed feedback, track your progress, and continuously improve your interview skills until you're ready to excel.\",\n      color: \"from-green-500 to-emerald-600\"\n    }\n  ];\n\n  const plans = [\n    {\n      name: \"Free\",\n      price: 0,\n      description: \"Perfect for getting started\",\n      features: [\n        \"3 interviews per month\",\n        \"Basic AI feedback\",\n        \"5 job roles\",\n        \"Text-based interviews only\"\n      ],\n      buttonText: \"Get Started Free\",\n      popular: false\n    },\n    {\n      name: \"Pro\",\n      price: 19,\n      description: \"For serious job seekers\",\n      features: [\n        \"Unlimited interviews\",\n        \"Voice-enabled interviews\",\n        \"Advanced AI feedback\",\n        \"50+ job roles\",\n        \"Performance analytics\"\n      ],\n      buttonText: \"Start Pro Trial\",\n      popular: true\n    },\n    {\n      name: \"Enterprise\",\n      price: 99,\n      description: \"For teams and organizations\",\n      features: [\n        \"Everything in Pro\",\n        \"Team management\",\n        \"Custom integrations\",\n        \"Priority support\"\n      ],\n      buttonText: \"Contact Sales\",\n      popular: false\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-slate-50 dark:bg-slate-900\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"pt-16 bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 dark:from-slate-900 dark:via-slate-800 dark:to-slate-900\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-20 pb-16\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-8 animate-fade-in\">\n              <div className=\"space-y-4\">\n                <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-bold text-slate-900 dark:text-white leading-tight\">\n                  Master Your Interview Skills with{\" \"}\n                  <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-primary to-secondary\">\n                    AI-Powered\n                  </span>{\" \"}\n                  Practice\n                </h1>\n                <p className=\"text-xl text-slate-600 dark:text-slate-300 leading-relaxed\">\n                  Practice real-time interviews with our AI voice agent. Get personalized feedback, improve your confidence, and land your dream job.\n                </p>\n              </div>\n\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button \n                  size=\"lg\" \n                  className=\"bg-primary hover:bg-primary/90 text-white px-8 py-4 rounded-xl font-semibold text-lg transition-all duration-200 transform hover:scale-105\"\n                  asChild\n                  data-testid=\"button-start-interview\"\n                >\n                  <a href=\"/api/login\">\n                    <Play className=\"mr-2 h-5 w-5\" />\n                    Start Free Interview\n                  </a>\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"lg\"\n                  className=\"border-2 border-slate-300 dark:border-slate-600 text-slate-700 dark:text-slate-300 hover:border-primary hover:text-primary px-8 py-4 rounded-xl font-semibold text-lg transition-all duration-200\"\n                  data-testid=\"button-watch-demo\"\n                >\n                  <Video className=\"mr-2 h-5 w-5\" />\n                  Watch Demo\n                </Button>\n              </div>\n\n              <div className=\"flex items-center space-x-6 text-sm text-slate-500 dark:text-slate-400\">\n                <div className=\"flex items-center space-x-2\">\n                  <Check className=\"h-4 w-4 text-green-500\" />\n                  <span>No credit card required</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Clock className=\"h-4 w-4 text-blue-500\" />\n                  <span>5-minute setup</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"relative animate-slide-up\">\n              {/* Main Dashboard Preview */}\n              <Card className=\"bg-white dark:bg-slate-800 rounded-2xl shadow-2xl border border-slate-200 dark:border-slate-700 overflow-hidden\">\n                {/* Dashboard Header */}\n                <div className=\"bg-slate-50 dark:bg-slate-900 px-6 py-4 border-b border-slate-200 dark:border-slate-700\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"font-semibold text-slate-900 dark:text-white\">Interview Dashboard</h3>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-3 h-3 bg-red-400 rounded-full\"></div>\n                      <div className=\"w-3 h-3 bg-yellow-400 rounded-full\"></div>\n                      <div className=\"w-3 h-3 bg-green-400 rounded-full\"></div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Dashboard Content */}\n                <CardContent className=\"p-6 space-y-6\">\n                  {/* Stats Cards */}\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div className=\"bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 p-4 rounded-xl\">\n                      <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">12</div>\n                      <div className=\"text-sm text-blue-600/70 dark:text-blue-400/70\">Interviews</div>\n                    </div>\n                    <div className=\"bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 p-4 rounded-xl\">\n                      <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">8.4</div>\n                      <div className=\"text-sm text-green-600/70 dark:text-green-400/70\">Avg Score</div>\n                    </div>\n                    <div className=\"bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20 p-4 rounded-xl\">\n                      <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">94%</div>\n                      <div className=\"text-sm text-purple-600/70 dark:text-purple-400/70\">Confidence</div>\n                    </div>\n                  </div>\n\n                  {/* Recent Interview */}\n                  <div className=\"bg-slate-50 dark:bg-slate-900 rounded-xl p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className=\"font-medium text-slate-900 dark:text-white\">Recent Interview</h4>\n                      <Badge className=\"bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400\">\n                        Completed\n                      </Badge>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"text-sm text-slate-600 dark:text-slate-400\">Frontend Developer - React</div>\n                      <div className=\"w-full bg-slate-200 dark:bg-slate-700 rounded-full h-2\">\n                        <div className=\"bg-gradient-to-r from-green-400 to-green-500 h-2 rounded-full\" style={{ width: \"85%\" }}></div>\n                      </div>\n                      <div className=\"text-xs text-slate-500 dark:text-slate-400\">Score: 8.5/10</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Floating Voice Indicator */}\n              <div className=\"absolute -bottom-4 -right-4 bg-gradient-to-r from-primary to-secondary rounded-full p-4 shadow-lg animate-pulse\">\n                <Mic className=\"text-white text-xl\" />\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 bg-white dark:bg-slate-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-slate-900 dark:text-white mb-4\">\n              Everything You Need to Excel\n            </h2>\n            <p className=\"text-xl text-slate-600 dark:text-slate-300 max-w-3xl mx-auto\">\n              Our comprehensive AI interview platform provides all the tools you need to practice, improve, and succeed in your next interview.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"group bg-slate-50 dark:bg-slate-900 rounded-2xl p-8 hover:shadow-xl transition-all duration-300 border border-slate-200 dark:border-slate-700\">\n                <CardContent className=\"p-0\">\n                  <div className={`w-12 h-12 bg-gradient-to-br ${feature.gradient} rounded-xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform`}>\n                    <feature.icon className=\"text-white text-xl\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-slate-900 dark:text-white mb-4\">{feature.title}</h3>\n                  <p className=\"text-slate-600 dark:text-slate-300 leading-relaxed\">\n                    {feature.description}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* How It Works Section */}\n      <section id=\"how-it-works\" className=\"py-20 bg-slate-50 dark:bg-slate-900\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-slate-900 dark:text-white mb-4\">\n              How It Works\n            </h2>\n            <p className=\"text-xl text-slate-600 dark:text-slate-300 max-w-3xl mx-auto\">\n              Get started with AI-powered interview practice in just a few simple steps. No complex setup required.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {steps.map((step, index) => (\n              <div key={index} className=\"text-center group\">\n                <div className=\"relative mb-8\">\n                  <div className={`w-20 h-20 bg-gradient-to-br ${step.color} rounded-full flex items-center justify-center mx-auto mb-4 group-hover:scale-110 transition-transform`}>\n                    <span className=\"text-2xl font-bold text-white\">{step.number}</span>\n                  </div>\n                </div>\n                <h3 className=\"text-xl font-semibold text-slate-900 dark:text-white mb-4\">{step.title}</h3>\n                <p className=\"text-slate-600 dark:text-slate-300 leading-relaxed\">\n                  {step.description}\n                </p>\n              </div>\n            ))}\n          </div>\n\n          {/* Call to Action */}\n          <div className=\"text-center mt-16\">\n            <Button \n              size=\"lg\"\n              className=\"bg-primary hover:bg-primary/90 text-white px-8 py-4 rounded-xl font-semibold text-lg transition-all duration-200 transform hover:scale-105\"\n              asChild\n              data-testid=\"button-get-started\"\n            >\n              <a href=\"/api/login\">\n                Start Your First Interview\n              </a>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section id=\"pricing\" className=\"py-20 bg-white dark:bg-slate-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-slate-900 dark:text-white mb-4\">\n              Simple, Transparent Pricing\n            </h2>\n            <p className=\"text-xl text-slate-600 dark:text-slate-300 max-w-3xl mx-auto\">\n              Choose the plan that fits your interview preparation needs. Start free and upgrade as you grow.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n            {plans.map((plan, index) => (\n              <Card key={index} className={`rounded-2xl p-8 border ${plan.popular ? 'border-2 border-primary bg-gradient-to-br from-primary/5 to-blue-50 dark:from-primary/10 dark:to-blue-900/20 relative' : 'border-slate-200 dark:border-slate-700 bg-slate-50 dark:bg-slate-900'}`}>\n                {plan.popular && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <Badge className=\"bg-primary text-white px-4 py-2 rounded-full text-sm font-semibold\">\n                      Most Popular\n                    </Badge>\n                  </div>\n                )}\n                <CardContent className=\"p-0\">\n                  <div className=\"text-center mb-8\">\n                    <h3 className=\"text-2xl font-bold text-slate-900 dark:text-white mb-2\">{plan.name}</h3>\n                    <div className=\"text-4xl font-bold text-slate-900 dark:text-white mb-4\">\n                      ${plan.price}\n                      <span className=\"text-lg text-slate-500 dark:text-slate-400\">/month</span>\n                    </div>\n                    <p className=\"text-slate-600 dark:text-slate-300\">{plan.description}</p>\n                  </div>\n                  <ul className=\"space-y-4 mb-8\">\n                    {plan.features.map((feature, featureIndex) => (\n                      <li key={featureIndex} className=\"flex items-center space-x-3\">\n                        <Check className=\"h-5 w-5 text-green-500 flex-shrink-0\" />\n                        <span className=\"text-slate-600 dark:text-slate-300\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                  <Button \n                    className={`w-full py-3 rounded-xl font-semibold transition-colors ${\n                      plan.popular \n                        ? 'bg-primary hover:bg-primary/90 text-white' \n                        : 'bg-slate-200 dark:bg-slate-700 text-slate-700 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-600'\n                    }`}\n                    asChild\n                    data-testid={`button-plan-${plan.name.toLowerCase()}`}\n                  >\n                    <a href=\"/api/login\">\n                      {plan.buttonText}\n                    </a>\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-slate-900 text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            {/* Brand and Description */}\n            <div className=\"md:col-span-2\">\n              <div className=\"flex items-center space-x-2 mb-6\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center\">\n                  <Mic className=\"text-white text-sm\" />\n                </div>\n                <span className=\"text-xl font-bold\">InterviewAI</span>\n              </div>\n              <p className=\"text-slate-400 leading-relaxed mb-6 max-w-md\">\n                The most advanced AI-powered interview practice platform. Build confidence, improve skills, and land your dream job with personalized feedback and realistic interview simulations.\n              </p>\n            </div>\n\n            {/* Product Links */}\n            <div>\n              <h4 className=\"font-semibold mb-6\">Product</h4>\n              <ul className=\"space-y-4 text-slate-400\">\n                <li><a href=\"#features\" className=\"hover:text-white transition-colors\">Features</a></li>\n                <li><a href=\"#pricing\" className=\"hover:text-white transition-colors\">Pricing</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">API</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Integrations</a></li>\n              </ul>\n            </div>\n\n            {/* Support Links */}\n            <div>\n              <h4 className=\"font-semibold mb-6\">Support</h4>\n              <ul className=\"space-y-4 text-slate-400\">\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Help Center</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Documentation</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Contact Us</a></li>\n                <li><a href=\"#\" className=\"hover:text-white transition-colors\">Status</a></li>\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"border-t border-slate-800 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\">\n            <p className=\"text-slate-400 text-sm\">© 2024 InterviewAI. All rights reserved.</p>\n            <div className=\"flex space-x-6 mt-4 md:mt-0\">\n              <a href=\"#\" className=\"text-slate-400 hover:text-white text-sm transition-colors\">Privacy Policy</a>\n              <a href=\"#\" className=\"text-slate-400 hover:text-white text-sm transition-colors\">Terms of Service</a>\n              <a href=\"#\" className=\"text-slate-400 hover:text-white text-sm transition-colors\">Cookie Policy</a>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":19921},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}